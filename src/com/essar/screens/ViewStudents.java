/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.ClassMasterDAO;
import com.essar.dao.StudentDAO;
import com.essar.pojos.ClassMaster;
import com.essar.utils.TableMouseListener;
import com.essar.pojos.Stock;
import com.essar.pojos.Student;
import com.essar.utils.GenericUtils;
import com.essar.utils.QueryStrings;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author rahumathulla
 */
public class ViewStudents extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form ProductCategory
     */
    long itemId=0;
    DefaultTableModel stockModel = null;
    DecimalFormat df = new DecimalFormat("##,##,###.##");
    String pattern = "yyyy-MM-dd";
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
    String reportQuery="";
    public ViewStudents() {        
        initComponents();
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
        //this.setBounds(10, 10, 1040, 800);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        mnuTable = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        mitView = new javax.swing.JMenuItem();
        btgSearchOption = new javax.swing.ButtonGroup();
        panStudentView = new javax.swing.JScrollPane();
        tblStudentView = new javax.swing.JTable();
        lblTotalCount = new javax.swing.JLabel();
        lblTotalSkipped = new javax.swing.JLabel();
        cmdCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        radName = new javax.swing.JRadioButton();
        txtName = new javax.swing.JTextField();
        cmdSearch = new javax.swing.JButton();
        radDateofBirth = new javax.swing.JRadioButton();
        dtpDateOfBirthFrom = new com.toedter.calendar.JDateChooser();
        dtpDateOfBirthTo = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        radAdmissionDate = new javax.swing.JRadioButton();
        dtpAdmissionDateFrom = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dtpAdmissionDateTo = new com.toedter.calendar.JDateChooser();
        lblClass1 = new javax.swing.JLabel();
        cmbClass = new javax.swing.JComboBox();
        radClass = new javax.swing.JRadioButton();
        btnReports = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        mitDelete.setText("jMenuItem1");

        mitView.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Student View");
        setExtendedState(6);
        setName("frmProductCategory"); // NOI18N

        panStudentView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panStudentViewMouseClicked(evt);
            }
        });

        tblStudentView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sl No:", "Student Name", "Date of Birth", "Gender", "Guardian", "Relationship", "Address", "Phone Number", "Admission Date", "Fees", "Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        panStudentView.setViewportView(tblStudentView);

        lblTotalCount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTotalCount.setForeground(new java.awt.Color(255, 153, 0));
        lblTotalCount.setText("Total Count : ");

        lblTotalSkipped.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTotalSkipped.setForeground(new java.awt.Color(255, 0, 204));

        cmdCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        cmdCancel.setText("Close");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search By"));

        btgSearchOption.add(radName);
        radName.setForeground(new java.awt.Color(0, 102, 102));
        radName.setText("Name or Phone Number");

        cmdSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        cmdSearch.setText("Search");
        cmdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSearchActionPerformed(evt);
            }
        });

        btgSearchOption.add(radDateofBirth);
        radDateofBirth.setForeground(new java.awt.Color(255, 102, 102));
        radDateofBirth.setText("Date of Birth Between");

        dtpDateOfBirthFrom.setDateFormatString("dd/MM/yyyy");
        dtpDateOfBirthFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dtpDateOfBirthFromFocusLost(evt);
            }
        });
        dtpDateOfBirthFrom.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                dtpDateOfBirthFromInputMethodTextChanged(evt);
            }
        });
        dtpDateOfBirthFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtpDateOfBirthFromPropertyChange(evt);
            }
        });
        dtpDateOfBirthFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dtpDateOfBirthFromKeyPressed(evt);
            }
        });

        dtpDateOfBirthTo.setDateFormatString("dd/MM/yyyy");
        dtpDateOfBirthTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dtpDateOfBirthToFocusLost(evt);
            }
        });
        dtpDateOfBirthTo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                dtpDateOfBirthToInputMethodTextChanged(evt);
            }
        });
        dtpDateOfBirthTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtpDateOfBirthToPropertyChange(evt);
            }
        });
        dtpDateOfBirthTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dtpDateOfBirthToKeyPressed(evt);
            }
        });

        jLabel1.setText("From");

        jLabel2.setText("To");

        btgSearchOption.add(radAdmissionDate);
        radAdmissionDate.setForeground(new java.awt.Color(0, 102, 102));
        radAdmissionDate.setText("Admission Date Between");

        dtpAdmissionDateFrom.setDateFormatString("dd/MM/yyyy");
        dtpAdmissionDateFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dtpAdmissionDateFromFocusLost(evt);
            }
        });
        dtpAdmissionDateFrom.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                dtpAdmissionDateFromInputMethodTextChanged(evt);
            }
        });
        dtpAdmissionDateFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtpAdmissionDateFromPropertyChange(evt);
            }
        });
        dtpAdmissionDateFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dtpAdmissionDateFromKeyPressed(evt);
            }
        });

        jLabel3.setText("From");

        jLabel4.setText("To");

        dtpAdmissionDateTo.setDateFormatString("dd/MM/yyyy");
        dtpAdmissionDateTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dtpAdmissionDateToFocusLost(evt);
            }
        });
        dtpAdmissionDateTo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                dtpAdmissionDateToInputMethodTextChanged(evt);
            }
        });
        dtpAdmissionDateTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtpAdmissionDateToPropertyChange(evt);
            }
        });
        dtpAdmissionDateTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dtpAdmissionDateToKeyPressed(evt);
            }
        });

        lblClass1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblClass1.setText("Class");

        cmbClass.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClassActionPerformed(evt);
            }
        });
        cmbClass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbClassKeyPressed(evt);
            }
        });

        btgSearchOption.add(radClass);
        radClass.setForeground(new java.awt.Color(255, 102, 102));
        radClass.setText("Class");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(65, 65, 65)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel2))
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dtpDateOfBirthTo, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radDateofBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtpDateOfBirthFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(77, 77, 77)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel4))
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dtpAdmissionDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dtpAdmissionDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(126, 126, 126)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radClass)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblClass1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(radAdmissionDate, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(radName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(radDateofBirth)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
                                        .addGap(3, 3, 3))
                                    .addComponent(dtpDateOfBirthFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dtpDateOfBirthTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radAdmissionDate)
                            .addComponent(radClass))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(dtpAdmissionDateFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblClass1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dtpAdmissionDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        btnReports.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnReports.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print.png"))); // NOI18N
        btnReports.setMnemonic('t');
        btnReports.setText("Print ");
        btnReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panStudentView)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(820, 820, 820))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTotalSkipped, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(btnReports, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmdCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panStudentView, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTotalSkipped, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnReports, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(cmdCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void panStudentViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panStudentViewMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                                Student student = null;
                itemId = Integer.parseInt(tblStudentView.getModel().getValueAt(tblStudentView.getSelectedRow(),10).toString());
                StudentDAO salesDAO = new StudentDAO();
                student = salesDAO.retrieveById(itemId);
                
                StudentRegister studentRegister = new StudentRegister();
                //studentRegister.fetchSalesDataIntoTable(salesDAO.retrieveByBillNumber(itemId));
                studentRegister.repaint();
                studentRegister.setVisible(true);
                studentRegister.fetchDataIntoTable(student);
                this.dispose();
                
     //handle double click event.
            }
    }//GEN-LAST:event_panStudentViewMouseClicked

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
        /*StudentRegister studentRegister = new StudentRegister();
        studentRegister.setBounds(100, 100, 960, 590);
        studentRegister.setVisible(true);*/
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void dtpDateOfBirthFromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dtpDateOfBirthFromFocusLost
        // TODO add your handling code here:
        //dtpAdmissionDate.requestFocus();
    }//GEN-LAST:event_dtpDateOfBirthFromFocusLost

    private void dtpDateOfBirthFromInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_dtpDateOfBirthFromInputMethodTextChanged
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Inside InputMethodTextChanged");
        //showHideCessFields(dtpSalesDate.getDate());
    }//GEN-LAST:event_dtpDateOfBirthFromInputMethodTextChanged

    private void dtpDateOfBirthFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtpDateOfBirthFromPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpDateOfBirthFromPropertyChange

    private void dtpDateOfBirthFromKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dtpDateOfBirthFromKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_dtpDateOfBirthFromKeyPressed

    private void dtpDateOfBirthToFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dtpDateOfBirthToFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpDateOfBirthToFocusLost

    private void dtpDateOfBirthToInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_dtpDateOfBirthToInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpDateOfBirthToInputMethodTextChanged

    private void dtpDateOfBirthToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtpDateOfBirthToPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpDateOfBirthToPropertyChange

    private void dtpDateOfBirthToKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dtpDateOfBirthToKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpDateOfBirthToKeyPressed

    private void dtpAdmissionDateFromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dtpAdmissionDateFromFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpAdmissionDateFromFocusLost

    private void dtpAdmissionDateFromInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_dtpAdmissionDateFromInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpAdmissionDateFromInputMethodTextChanged

    private void dtpAdmissionDateFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtpAdmissionDateFromPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpAdmissionDateFromPropertyChange

    private void dtpAdmissionDateFromKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dtpAdmissionDateFromKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpAdmissionDateFromKeyPressed

    private void dtpAdmissionDateToFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dtpAdmissionDateToFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpAdmissionDateToFocusLost

    private void dtpAdmissionDateToInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_dtpAdmissionDateToInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpAdmissionDateToInputMethodTextChanged

    private void dtpAdmissionDateToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtpAdmissionDateToPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpAdmissionDateToPropertyChange

    private void dtpAdmissionDateToKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dtpAdmissionDateToKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_dtpAdmissionDateToKeyPressed

    private void cmdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchActionPerformed
        // TODO add your handling code here:
        if (validateSearchOption()){
            StudentDAO studentDAO = new StudentDAO();
            renderDataIntoTable(studentDAO.retrieveByQuery(QueryStrings.studentListQuery));
            
        }
        //this.dispose();
        //ViewStudents viewStudents = new ViewStudents();
        //studentAlerts.setBounds(40, 40, 940, 500);
        //viewStudents.setVisible(true);
    }//GEN-LAST:event_cmdSearchActionPerformed

    private void cmbClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClassActionPerformed
        // TODO add your handling code here:
        try{
            //gTuitionFees = ((ClassMaster)(cmbClass.getSelectedItem())).getFees();
            //txtTuitionFees.setText(gTuitionFees+"");
        }catch(Exception e){
            System.out.println("-- "+e.getMessage());
        }
    }//GEN-LAST:event_cmbClassActionPerformed

    private void cmbClassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbClassKeyPressed
        // TODO add your handling code here:
        /*if(evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER){
            cmbSchoolName.requestFocus();
        }*/
    }//GEN-LAST:event_cmbClassKeyPressed

    private void btnReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportsActionPerformed
        // TODO add your handling code here:
        /*ConnectionManager cm = new ConnectionManager();
        Connection con = cm.getConnection();        
        String reportString="src\\com\\essar\\reports\\student_report_first_choice.jrxml";
        JasperReport jr = null;
        try {
            jr = JasperCompileManager.compileReport(reportString);
        } catch (JRException ex) {
            Logger.getLogger(StudentRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
        JasperPrint jp = null;
        try {
            jp = JasperFillManager.fillReport(jr, null,con);
        } catch (JRException ex) {
            Logger.getLogger(StudentRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
        JasperViewer jv = new JasperViewer(jp, false);
        jv.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt){
                //JOptionPane.showMessageDialog(new javax.swing.JFrame(), "Closed","Why?", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Jasper Window has been closed");
            }
        });
        jv.setVisible(true);*/
        if(validateReportQueryCreation())
            GenericUtils.printReport("D:\\Leaders\\reports\\student_report.jrxml", reportQuery);
    }//GEN-LAST:event_btnReportsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ViewStudents().setVisible(true);
            }
        });
    }
    

    public void initializeForm(){

        StudentDAO StudentDAO = new StudentDAO();
        renderDataIntoTable(StudentDAO.retrieveByQuery(QueryStrings.studentListQuery));
        mnuTable = new JPopupMenu();
        mitDelete = new JMenuItem("Delete");
        mitDelete.addActionListener(this);
        
        mitView = new JMenuItem("View");
        mitView.addActionListener(this);
        
        mnuTable.add(mitDelete);
        mnuTable.add(mitView);
         // sets the popup menu for the table
        tblStudentView.setComponentPopupMenu(mnuTable);      
        tblStudentView.addMouseListener(new TableMouseListener(tblStudentView));
        
        TableColumn slNumberColumn = tblStudentView.getColumnModel().getColumn(0);
        slNumberColumn.setPreferredWidth(60);
        slNumberColumn.setMinWidth(60);
        slNumberColumn.setMaxWidth(60);
        
        TableColumn studentNameCol = tblStudentView.getColumnModel().getColumn(1);
        studentNameCol.setPreferredWidth(160);
        studentNameCol.setMinWidth(160);
        studentNameCol.setMaxWidth(160);
        
        TableColumn dateColumn = tblStudentView.getColumnModel().getColumn(2);
        dateColumn.setPreferredWidth(120);
        dateColumn.setMinWidth(120);
        dateColumn.setMaxWidth(120);
        
        TableColumn genderColumn = tblStudentView.getColumnModel().getColumn(3);
        genderColumn.setPreferredWidth(60);
        genderColumn.setMinWidth(60);
        genderColumn.setMaxWidth(60);
        
        TableColumn guardianCol = tblStudentView.getColumnModel().getColumn(4);
        guardianCol.setPreferredWidth(160);
        guardianCol.setMinWidth(160);
        guardianCol.setMaxWidth(160);
        
        TableColumn relCol = tblStudentView.getColumnModel().getColumn(5);
        relCol.setPreferredWidth(120);
        relCol.setMinWidth(120);
        relCol.setMaxWidth(120);
        
        /*TableColumn addrCol = tblStudentView.getColumnModel().getColumn(6);
        addrCol.setPreferredWidth(320);
        addrCol.setMinWidth(320);
        addrCol.setMaxWidth(320);*/
        
        TableColumn phoneCol = tblStudentView.getColumnModel().getColumn(7);
        phoneCol.setPreferredWidth(120);
        phoneCol.setMinWidth(120);
        phoneCol.setMaxWidth(120);
        
        TableColumn admDateCol = tblStudentView.getColumnModel().getColumn(8);
        admDateCol.setPreferredWidth(120);
        admDateCol.setMinWidth(120);
        admDateCol.setMaxWidth(120);
        
        TableColumn feePerCol = tblStudentView.getColumnModel().getColumn(9);
        feePerCol.setPreferredWidth(80);
        feePerCol.setMinWidth(80);
        feePerCol.setMaxWidth(80);
        
        ClassMasterDAO classMasterDAO = new ClassMasterDAO();
        renderClassDataIntoDropDown(classMasterDAO.retrieveAll());
        /*for(int i=0; i<cmbClass.getItemCount();i++){
            if(((ClassMaster)cmbClass.getItemAt(i)).getClassMasterId()==student.getClassId()){
                cmbClass.setSelectedItem(cmbClass.getItemAt(i));
            }
        }*/
        
   
    }
    
    public void renderClassDataIntoDropDown(List<ClassMaster> classMasterList){
        ClassMaster classMaster = null;
        cmbClass.removeAllItems();
        if(classMasterList!= null){
            for(int i=0; i<classMasterList.size();i++){
                cmbClass.addItem(classMasterList.get(i));
            }
            cmbClass.setSelectedIndex(0);
            classMaster = (ClassMaster)cmbClass.getSelectedItem();            
        }  
    }

    public void renderDataIntoTable(List<Student> studentList){
        
        stockModel = (DefaultTableModel) tblStudentView.getModel();
        stockModel.setRowCount(0);
        //!@--17/03/2020 Setting id column width to 0;
        TableColumn idColumn1 = tblStudentView.getColumnModel().getColumn(tblStudentView.getColumnCount()-1);
        idColumn1.setPreferredWidth(0);
        idColumn1.setMinWidth(0);
        idColumn1.setMaxWidth(0);
        //idColumn1.
        double dStockValue=0;
        double dSalesValue=0;
        double dProfitPrediction=0;
        int iSkipped =0;
        for(int i=0;i<studentList.size();i++){
            stockModel.addRow(new Object[]{tblStudentView.getRowCount()+1,studentList.get(i).getStudentName(),studentList.get(i).getDateOfBirth(),studentList.get(i).getGender(),studentList.get(i).getGuardian(),studentList.get(i).getRelationship(),studentList.get(i).getAddress(), studentList.get(i).getContactNumber(), studentList.get(i).getAdmissionDate(),studentList.get(i).getFeesPercentage(), studentList.get(i).getStudentId()});

        }
        dProfitPrediction = dSalesValue - dStockValue;
        if(dProfitPrediction < 0)
            //lblPredictedProfit.setForeground(Color.red);
        //lblTotalSalesValue.setText("Total Sales Value : "+df.format(dSalesValue));
        //lblTotalValue.setText("Total Stock Value : "+df.format(dStockValue));
        //lblPredictedProfit.setText("Predicted Profit  : "+df.format(dProfitPrediction));
        lblTotalCount.setText("Total Count : "+studentList.size());
        if(iSkipped>0){
            lblTotalSkipped.setText("Skip Count : "+iSkipped);
        }
        TableColumn nameColumn = tblStudentView.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        tblStudentView.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events              
                    syncDataFromViewToTable();
                }
            }
        });
        
    }
    
    public boolean validateSearchOption(){
        QueryStrings.studentListQuery = "SELECT * from student WHERE 1=1 ";
        if(radName.isSelected()){
            if(null==txtName.getText()){
                JOptionPane.showConfirmDialog(this, "Please enter the name or phone number");
                txtName.requestFocus();
                return false;
            }else{
                String name = txtName.getText();                       
                QueryStrings.studentListQuery+=" AND student_name like '%"+name+"%' OR contact_number like '%"+name+"%'";
                return true;
            }
        }else if(radDateofBirth.isSelected()){
            if(null==dtpDateOfBirthFrom.getDate() || null==dtpDateOfBirthTo.getDate()){
                JOptionPane.showConfirmDialog(this, "Please give correct date values");
                return false;
            }else{
                String fromDate = simpleDateFormat.format(dtpDateOfBirthFrom.getDate());
                String toDate = simpleDateFormat.format(dtpDateOfBirthTo.getDate());
                QueryStrings.studentListQuery+=" AND date_of_birth BETWEEN '"+fromDate+" 00:00:00' AND '"+toDate+" 23:59:59'";
                return true;
            }
            
        }else if(radAdmissionDate.isSelected()){
            if(null==dtpAdmissionDateFrom.getDate() || null==dtpAdmissionDateTo.getDate()){
                JOptionPane.showConfirmDialog(this, "Please give correct date values");
                return false;
            }else{
                String fromDate = simpleDateFormat.format(dtpAdmissionDateFrom.getDate());
                String toDate = simpleDateFormat.format(dtpAdmissionDateTo.getDate());
                QueryStrings.studentListQuery+=" AND admission_date BETWEEN '"+fromDate+" 00:00:00' AND '"+toDate+" 23:59:59'";
                return true;
            }
        }else if(radClass.isSelected()){
            if(null==cmbClass.getSelectedItem()){
                JOptionPane.showConfirmDialog(this, "Please select a Class");
                return false;
            }else{
                
                QueryStrings.studentListQuery+=" AND class_id ="+((ClassMaster)cmbClass.getSelectedItem()).getClassMasterId();
                return true;
            }
        }
        return true;
    }
    
    public boolean validateReportQueryCreation(){
        reportQuery = "SELECT st.student_name AS student_name, st.gender AS gender, st.date_of_birth AS dob"
                + ", st.admission_date AS adm_date, st.guardian AS guardian, st.contact_number AS cont_number"
                + ", cl.class_name AS class_name, st.extra_curricular AS extra_curr " 
                + " FROM student st JOIN class_master cl ON st.class_id = cl.class_master_id WHERE 1=1 ";
        if(radName.isSelected()){
            if(null==txtName.getText()){
                JOptionPane.showConfirmDialog(this, "Please enter the name or phone number");
                txtName.requestFocus();
                return false;
            }else{
                String name = txtName.getText();                       
                reportQuery+=" AND st.student_name like '%"+name+"%' OR st.contact_number like '%"+name+"%'";
                return true;
            }
        }else if(radDateofBirth.isSelected()){
            if(null==dtpDateOfBirthFrom.getDate() || null==dtpDateOfBirthTo.getDate()){
                JOptionPane.showConfirmDialog(this, "Please give correct date values");
                return false;
            }else{
                String fromDate = simpleDateFormat.format(dtpDateOfBirthFrom.getDate());
                String toDate = simpleDateFormat.format(dtpDateOfBirthTo.getDate());
                reportQuery+=" AND date_of_birth st.BETWEEN '"+fromDate+" 00:00:00' AND '"+toDate+" 23:59:59'";
                return true;
            }
            
        }else if(radAdmissionDate.isSelected()){
            if(null==dtpAdmissionDateFrom.getDate() || null==dtpAdmissionDateTo.getDate()){
                JOptionPane.showConfirmDialog(this, "Please give correct date values");
                return false;
            }else{
                String fromDate = simpleDateFormat.format(dtpAdmissionDateFrom.getDate());
                String toDate = simpleDateFormat.format(dtpAdmissionDateTo.getDate());
                reportQuery+=" AND st.admission_date BETWEEN '"+fromDate+" 00:00:00' AND '"+toDate+" 23:59:59'";
                return true;
            }
        }else if(radClass.isSelected()){
            if(null==cmbClass.getSelectedItem()){
                JOptionPane.showConfirmDialog(this, "Please select a Class");
                return false;
            }else{
                
                reportQuery+=" AND st.class_id ="+((ClassMaster)cmbClass.getSelectedItem()).getClassMasterId();
                return true;
            }
        }
        return true;
    }
    
    public void syncDataFromViewToTable(){
        //System.out.println("--------INSIDE DELETE-"+tblCategory.getModel().getValueAt(tblCategory.getSelectedRow(),0));
        Student student = null;
        StudentDAO studentDAO = new StudentDAO();
        itemId = Integer.parseInt(tblStudentView.getModel().getValueAt(tblStudentView.getSelectedRow(),tblStudentView.getColumnCount()-1).toString());
        //StudentDAO salesDAO = new StudentDAO();
        System.out.println("Id---"+itemId);
        student = studentDAO.retrieveById(itemId);

        StudentRegister studentRegister = new StudentRegister();
        studentRegister.setBounds(40, 40, 840, 680);
        studentRegister.fetchDataIntoTable(student);
        studentRegister.repaint();
        studentRegister.setVisible(true);
        //studentRegister.(sales);
        this.dispose();
    }               
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgSearchOption;
    private javax.swing.JButton btnReports;
    private javax.swing.JComboBox cmbClass;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdSearch;
    private com.toedter.calendar.JDateChooser dtpAdmissionDateFrom;
    private com.toedter.calendar.JDateChooser dtpAdmissionDateTo;
    private com.toedter.calendar.JDateChooser dtpDateOfBirthFrom;
    private com.toedter.calendar.JDateChooser dtpDateOfBirthTo;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblClass1;
    private javax.swing.JLabel lblTotalCount;
    private javax.swing.JLabel lblTotalSkipped;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitView;
    private javax.swing.JPopupMenu mnuTable;
    private javax.swing.JScrollPane panStudentView;
    private javax.swing.JRadioButton radAdmissionDate;
    private javax.swing.JRadioButton radClass;
    private javax.swing.JRadioButton radDateofBirth;
    private javax.swing.JRadioButton radName;
    private javax.swing.JTable tblStudentView;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
            if (menu == mitDelete) {
                Stock stock = null;
                //StudentDAO StudentDAO = new StudentDAO();
                //int rowIndex = tblCategory.getSelectedRow();
                //System.out.println("--------INSIDE DELETE-"+tblCategory.getModel().getValueAt(tblCategory.getSelectedRow(),0));
                long id = Long.parseLong(tblStudentView.getModel().getValueAt(tblStudentView.getSelectedRow(),tblStudentView.getColumnCount()-1).toString());
                StudentDAO StudentDAO = new StudentDAO();
                StudentDAO.deleteRecordById(id);
                GenericUtils.removeRowFromJTable(tblStudentView, stockModel);
                
                //tblGst.getModel().removeRow(tblGst.getSelectedRow());
                //tblGst.remove(3);
                //tblGst.revalidate();
                //tblGst.repaint();
                // Bug Fix for row doubling during table record deletion
                /*this.dispose();
                GSTForm gSTForm = new GSTForm();
                gSTForm.setVisible(true);*/
                
                //initializeForm();
                
                
            }
            
            if (menu == mitView) {
                    syncDataFromViewToTable();
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }
}
