/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.ClassMasterDAO;
import com.essar.dao.ComplaintDAO;
import com.essar.dao.StudentDAO;
import com.essar.dao.SupplierDAO;
import com.essar.pojos.ClassMaster;
import com.essar.suggestion.SuggestionExampleMain;
import com.essar.utils.TableMouseListener;
import com.essar.pojos.PurchaseReturn;
import com.essar.pojos.Stock;
import com.essar.pojos.Student;
import com.essar.pojos.Complaint;
import com.essar.utils.ConnectionManager;
import com.essar.utils.GenericUtils;
import java.awt.Color;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author rahumathulla
 */
public class ComplaintRegister extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form ProductCategory
     */
    double gSalesPercentage = 0;
    Stock stock = null;
    Student student = null;

    //!-- 06/27/2020 Added for navigation
    long minId = 0;
    long maxId = 0;
    long currentId=0;
    long complaintIdEdit=0;
    long studentIdEdit=0;
    HashMap map = new HashMap();
    //List<PurchaseReturn> returnList = null;
    DecimalFormat df = new DecimalFormat("###.##");
    DefaultTableModel purchaseDetailsModel = null;
    public ComplaintRegister() {
        initComponents();
        tblComplaint.setDefaultRenderer(Object.class, new MyTableCeellRenderer());
        tblComplaint.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e){
                tblComplaint.scrollRectToVisible(tblComplaint.getCellRect(tblComplaint.getRowCount()-1, 0, true));
            }
        });
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
    }
    
    public ComplaintRegister(Complaint complaint) {
        initComponents();
        this.setBounds(40, 40, 960, 660);
        //initializeForm();
        //fetchPurchaseDataIntoTable(purchase);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        mnuComplaintActions = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        stockDAO1 = new com.essar.dao.StockDAO();
        btgComplaintStatus = new javax.swing.ButtonGroup();
        mitReturn = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        pnlPurchase = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblInvoiceNumber = new javax.swing.JLabel();
        txtRefenceNumber = new javax.swing.JTextField();
        lblItemName = new javax.swing.JLabel();
        txtStudentName = new javax.swing.JTextField();
        lblHSNCode = new javax.swing.JLabel();
        txtParentName = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        dtpComplaintLogDate = new com.toedter.calendar.JDateChooser();
        lblDate1 = new javax.swing.JLabel();
        dtpResolutionDate = new com.toedter.calendar.JDateChooser();
        lblUnitPrice = new javax.swing.JLabel();
        txtClass = new javax.swing.JTextField();
        cmdReset = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtComplaintNotes = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        panStatus = new javax.swing.JPanel();
        radNew = new javax.swing.JRadioButton();
        radResolved = new javax.swing.JRadioButton();
        radInProgress = new javax.swing.JRadioButton();
        spnPurchaseItems = new javax.swing.JScrollPane();
        tblComplaint = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        mitDelete.setText("jMenuItem1");

        mitReturn.setText("jMenuItem1");

        mitEdit.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Complaint Register");
        setBackground(new java.awt.Color(204, 204, 255));
        setBounds(new java.awt.Rectangle(20, 20, 500, 500));
        setExtendedState(6);
        setName("frmProductCategory"); // NOI18N
        getContentPane().setLayout(null);

        pnlPurchase.setBackground(new java.awt.Color(204, 204, 204));
        pnlPurchase.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        pnlPurchase.setForeground(new java.awt.Color(255, 204, 204));

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnPrint.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print.png"))); // NOI18N
        btnPrint.setMnemonic('P');
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        btnReset.setMnemonic('R');
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        lblInvoiceNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblInvoiceNumber.setText("Reference Number:");

        txtRefenceNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtRefenceNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRefenceNumberKeyReleased(evt);
            }
        });

        lblItemName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblItemName.setText("Student Name");

        txtStudentName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentNameActionPerformed(evt);
            }
        });
        txtStudentName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudentNameKeyReleased(evt);
            }
        });

        lblHSNCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblHSNCode.setText("Name of Parent");

        txtParentName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtParentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtParentNameActionPerformed(evt);
            }
        });

        lblDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDate.setText("Date:");

        dtpComplaintLogDate.setDateFormatString("dd/MM/yyyy");

        lblDate1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDate1.setText("Resolution Date:");

        dtpResolutionDate.setDateFormatString("dd/MM/yyyy");

        lblUnitPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblUnitPrice.setText("Class");

        txtClass.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtClass.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClassActionPerformed(evt);
            }
        });
        txtClass.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtClassPropertyChange(evt);
            }
        });
        txtClass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtClassKeyReleased(evt);
            }
        });

        cmdReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmdReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_small.png"))); // NOI18N
        cmdReset.setText("Reset");
        cmdReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHSNCode, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate)
                    .addComponent(lblDate1)
                    .addComponent(lblUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInvoiceNumber))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtClass, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtParentName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(dtpResolutionDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                            .addComponent(dtpComplaintLogDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(83, 83, 83)
                        .addComponent(cmdReset))
                    .addComponent(txtRefenceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(208, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInvoiceNumber)
                    .addComponent(txtRefenceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemName)
                    .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUnitPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHSNCode)
                    .addComponent(txtParentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDate)
                    .addComponent(dtpComplaintLogDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(dtpResolutionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDate1))
                    .addComponent(cmdReset))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        txtComplaintNotes.setColumns(20);
        txtComplaintNotes.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        txtComplaintNotes.setRows(5);
        jScrollPane3.setViewportView(txtComplaintNotes);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("Complaint Notes");

        panStatus.setBackground(new java.awt.Color(204, 204, 204));
        panStatus.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        btgComplaintStatus.add(radNew);
        radNew.setText("New");
        radNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radNewActionPerformed(evt);
            }
        });

        btgComplaintStatus.add(radResolved);
        radResolved.setText("Resolved");

        btgComplaintStatus.add(radInProgress);
        radInProgress.setText("In Progress");

        javax.swing.GroupLayout panStatusLayout = new javax.swing.GroupLayout(panStatus);
        panStatus.setLayout(panStatusLayout);
        panStatusLayout.setHorizontalGroup(
            panStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radNew)
                .addGap(86, 86, 86)
                .addComponent(radInProgress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(radResolved)
                .addGap(55, 55, 55))
        );
        panStatusLayout.setVerticalGroup(
            panStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radNew)
                    .addComponent(radResolved)
                    .addComponent(radInProgress))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlPurchaseLayout = new javax.swing.GroupLayout(pnlPurchase);
        pnlPurchase.setLayout(pnlPurchaseLayout);
        pnlPurchaseLayout.setHorizontalGroup(
            pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(415, 415, 415))))
        );
        pnlPurchaseLayout.setVerticalGroup(
            pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(panStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        getContentPane().add(pnlPurchase);
        pnlPurchase.setBounds(30, 30, 1290, 370);

        spnPurchaseItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spnPurchaseItemsKeyPressed(evt);
            }
        });

        tblComplaint.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sl No:", "Ref Number", "Student Name", "Parent Name", "Class ", "Complaint Log Date", "Resolution Date", "Status", "Complaint Details", "Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblComplaint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblComplaintMouseClicked(evt);
            }
        });
        tblComplaint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblComplaintKeyPressed(evt);
            }
        });
        spnPurchaseItems.setViewportView(tblComplaint);

        getContentPane().add(spnPurchaseItems);
        spnPurchaseItems.setBounds(30, 450, 1290, 430);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdResetActionPerformed
        // TODO add your handling code here:
        clearItemFields();
    }//GEN-LAST:event_cmdResetActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(btnSave.getText().equalsIgnoreCase("new")){

            ComplaintDAO refNumGenDAO = new ComplaintDAO();
            txtRefenceNumber.setText(refNumGenDAO.generateReferenceNumber()+"");
            radNew.setSelected(true);
            complaintIdEdit = 0;
            //studentIdEdit = 0;
            SupplierDAO supplierDAO = new SupplierDAO();
            //renderSupplierDataIntoDropDown(supplierDAO.retrieveAll());
            /*SalesDAO billGenDAO =  new SalesDAO();
            txtBillNumber.setText(billGenDAO.generateBillNumber()+"");
            ((DefaultTableModel)tblSalesDetails.getModel()).setNumRows(0); */
            btnSave.setText("Save");
            btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
            enableFormElements(true);
            if(null==dtpComplaintLogDate.getDate()){
                dtpComplaintLogDate.setDate(new Date());
            }
            SuggestionExampleMain.populateStudentNames(this, txtStudentName);
            //txtRefenceNumber.requestFocus();
            txtStudentName.requestFocus();
        }else if(btnSave.getText().equalsIgnoreCase("save")){
            //Implement Save Logic
            if(validateDetails()){
                saveForm();
                initializeForm();
            }

        }else if(btnSave.getText().equalsIgnoreCase("update")){

            updateForm();
            initializeForm();
            /*this.dispose();
            SalesWindow salesWindow = new SalesWindow();
            salesWindow.setBounds(100, 60, 960, 590);
            salesWindow.setVisible(true);*/

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentNameActionPerformed
        // TODO add your handling code here:
        try{
            populateItemDetails();
        }
        catch(Exception e){
            System.out.println("Error Retrieving the item -"+e.getMessage());
        }
    }//GEN-LAST:event_txtStudentNameActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
            ConnectionManager cm = new ConnectionManager();
            Connection con = cm.getConnection();            
            //String reportString="C:\\Users\\rahumathulla\\Documents\\NetBeansProjects\\shopaid\\src\\com\\essar\\reports\\sales_print_1.jrxml";
            //String reportString="C:\\Users\\rahumathulla\\AppData\\Local\\shopaid\\src\\com\\essar\\reports\\sales_print.jrxml";
            //String reportString="src\\com\\essar\\reports\\sales_print.jrxml";
            String reportString="src\\com\\essar\\reports\\purchase_print.jrxml";
            JasperReport jr = null;
            HashMap map = new HashMap();
            map.put("bill_no",Integer.parseInt(txtRefenceNumber.getText())); 
        try {
            jr = JasperCompileManager.compileReport(reportString);
        } catch (JRException ex) {
            Logger.getLogger(ComplaintRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
            JasperPrint jp = null;
        try {
            jp = JasperFillManager.fillReport(jr, map,con);
            //JasperViewer jv = new JasperViewer( jp, false );
            //jv.viewReport( jp, false );             
            //JasperViewer.viewReport(jp, false);
            //jv.setDefaultCloseOperation(JasperViewer.DISPOSE_ON_CLOSE);
            //jv.setTitle("Sales Bill");
            con.close();
        } catch (JRException ex) {
            Logger.getLogger(StudentRegister.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ComplaintRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
            //JasperViewer.viewReport(jp);
        JasperViewer jv = new JasperViewer(jp, false);
        jv.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt){
                //JOptionPane.showMessageDialog(new javax.swing.JFrame(), "Closed","Why?", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Jasper Window has been closed");
            }
        });
        jv.setVisible(true);
    }//GEN-LAST:event_btnPrintActionPerformed

    private void txtClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClassActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtClassActionPerformed

    private void txtStudentNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudentNameKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            System.out.println("---inside item name change");
            try{
                populateItemDetails();
            }
            catch(Exception e){
                System.out.println("Error Retireving the item -"+e.getMessage());
            }
        }
    }//GEN-LAST:event_txtStudentNameKeyReleased

    private void txtClassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtClassKeyReleased
         // TODO add your handling code here:
        /* try{
            if(txtPurchasePrice.isVisible()){
                    //calculateSuggestions();
                    double itemRate = Double.parseDouble(txtRate.getText());
                    double pricePostGst = itemRate+(stock.getGstPercentage()* itemRate/100);
                    txtPurchasePrice.setText(df.format(pricePostGst));
                    
                    double gstValue = itemRate * stock.getGstPercentage() / 100;
                    txtGstAmount.setText(df.format(gstValue));
                }
            }catch(Exception e){
                
            }*/
    }//GEN-LAST:event_txtClassKeyReleased

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        initializeForm();
    }//GEN-LAST:event_btnResetActionPerformed

    private void spnPurchaseItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnPurchaseItemsKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_spnPurchaseItemsKeyPressed

    private void tblComplaintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblComplaintKeyPressed
        // TODO add your handling code here:
         if(evt.getKeyCode()== KeyEvent.VK_HOME && tblComplaint.getRowCount()>0){
            /*mitDelete = new JMenuItem("Delete");
            mitDelete.addActionListener(this);        
            mnuComplaintActions.add(mitDelete);*/
             
            mitEdit = new JMenuItem("Edit");
            mitEdit.addActionListener(this); 
            mnuComplaintActions.add(mitEdit);
             
        }
    }//GEN-LAST:event_tblComplaintKeyPressed

    private void tblComplaintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblComplaintMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_tblComplaintMouseClicked

    private void txtClassPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtClassPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClassPropertyChange

    private void txtRefenceNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRefenceNumberKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            try{
               txtStudentName.requestFocus();
            }
            catch(Exception e){
            }
        }
    }//GEN-LAST:event_txtRefenceNumberKeyReleased

    private void txtParentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtParentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtParentNameActionPerformed

    private void radNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radNewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radNewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComplaintRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComplaintRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComplaintRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComplaintRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComplaintRegister().setVisible(true);
            }
        });
    }
    
    public void initializeForm(){
        //btnAddMore.setVisible(false);
        btnSave.setText("New");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        btnSave.requestFocus();
        txtParentName.setText("");
        txtStudentName.setText("");
        
        if(null==dtpResolutionDate.getDate()){
            //dtpFromDate.setDate(new Date());
            Calendar cal = Calendar.getInstance();
            System.out.println("Today : " + cal.getTime());
            cal.add(Calendar.DATE, 14);           
            System.out.println("14 days after: " + cal.getTime());
            dtpResolutionDate.setDate(cal.getTime());
        }        
        if(null==dtpComplaintLogDate.getDate()){
            dtpComplaintLogDate.setDate(new Date());
        }       
        enableFormElements(false);
        
        mnuComplaintActions = new JPopupMenu();
        mitDelete = new JMenuItem("Delete");
        mitDelete.addActionListener(this);
        
        mitEdit = new JMenuItem("Edit");
        mitEdit.addActionListener(this);
        
        mnuComplaintActions.add(mitDelete);
        mnuComplaintActions.add(mitEdit);
        
         
        //mnuCategory.add(mitEdit);
         // sets the popup menu for the table
        tblComplaint.setComponentPopupMenu(mnuComplaintActions);      
        tblComplaint.addMouseListener(new TableMouseListener(tblComplaint));
         // sets the popup menu for the table
        tblComplaint.setComponentPopupMenu(mnuComplaintActions);      
        tblComplaint.addMouseListener(new TableMouseListener(tblComplaint));
        
        TableColumn slNoColumn = tblComplaint.getColumnModel().getColumn(0);
        slNoColumn.setPreferredWidth(60);
        slNoColumn.setMinWidth(60);
        slNoColumn.setMaxWidth(60);
        
        TableColumn refNoColumn = tblComplaint.getColumnModel().getColumn(1);
        refNoColumn.setPreferredWidth(120);
        refNoColumn.setMinWidth(120);
        refNoColumn.setMaxWidth(120);
        
        TableColumn nameColumn = tblComplaint.getColumnModel().getColumn(2);
        nameColumn.setPreferredWidth(180);
        nameColumn.setMinWidth(180);
        nameColumn.setMaxWidth(180);
        
        TableColumn parentNameColumn = tblComplaint.getColumnModel().getColumn(3);
        parentNameColumn.setPreferredWidth(180);
        parentNameColumn.setMinWidth(180);
        parentNameColumn.setMaxWidth(180);
        
        TableColumn classNoColumn = tblComplaint.getColumnModel().getColumn(4);
        classNoColumn.setPreferredWidth(60);
        classNoColumn.setMinWidth(60);
        classNoColumn.setMaxWidth(60);
        
        TableColumn logDateColumn = tblComplaint.getColumnModel().getColumn(5);
        logDateColumn.setPreferredWidth(120);
        logDateColumn.setMinWidth(120);
        logDateColumn.setMaxWidth(120);
        
        TableColumn resDateColumn = tblComplaint.getColumnModel().getColumn(6);
        resDateColumn.setPreferredWidth(120);
        resDateColumn.setMinWidth(120);
        resDateColumn.setMaxWidth(120);
        
        TableColumn statusColumn = tblComplaint.getColumnModel().getColumn(7);
        statusColumn.setPreferredWidth(120);
        statusColumn.setMinWidth(120);
        statusColumn.setMaxWidth(120);
        
        TableColumn complaintNotesColumn = tblComplaint.getColumnModel().getColumn(tblComplaint.getColumnCount()-2);
        complaintNotesColumn.setPreferredWidth(400);
        complaintNotesColumn.setMinWidth(400);
        complaintNotesColumn.setMaxWidth(400);
        
        
        TableColumn idColumn = tblComplaint.getColumnModel().getColumn(tblComplaint.getColumnCount()-1);
        idColumn.setPreferredWidth(0);
        idColumn.setMinWidth(0);
        idColumn.setMaxWidth(0);
        

        
        /*TableColumn itemColumn = tblComplaint.getColumnModel().getColumn(tblComplaint.getColumnCount()-2);
        itemColumn.setPreferredWidth(0);
        itemColumn.setMinWidth(0);
        itemColumn.setMaxWidth(0);*/
        
        /*TableColumn itemNameColumn = tblComplaint.getColumnModel().getColumn(1);
        itemNameColumn.setPreferredWidth(100);
        itemNameColumn.setMinWidth(100);
        itemNameColumn.setMaxWidth(100);
        
        TableColumn phoneNumberCol = tblComplaint.getColumnModel().getColumn(2);
        phoneNumberCol.setPreferredWidth(100);
        phoneNumberCol.setMinWidth(100);
        phoneNumberCol.setMaxWidth(100);*/
        
        ComplaintDAO navigationDAO =  new ComplaintDAO();
        List<Long> idMaxMin = navigationDAO.getMaxAndMinIds();
        minId = idMaxMin.get(0);
        maxId = idMaxMin.get(1);
        //currentId = maxId;
        
        tblComplaint.removeAll();
        tblComplaint.repaint();
        DefaultTableModel model = (DefaultTableModel) tblComplaint.getModel();
        model.setRowCount(0);
        ComplaintDAO complaintDAO = new ComplaintDAO();
        renderDataIntoTable(complaintDAO.retrieveAll());
   
    }
    
    public void enableFormElements(boolean flag){
        txtRefenceNumber.setEnabled(flag);
        txtParentName.setEnabled(flag);
        txtStudentName.setEnabled(flag);
        //txtQuantity.setEnabled(flag);
        txtClass.setEnabled(flag);

        dtpComplaintLogDate.setEnabled(flag);
        
    }
    public boolean validateForm(){
            
        if(null == txtStudentName.getText()){
            JOptionPane.showMessageDialog(null, "Please give the item name.");
            txtStudentName.requestFocus();
            return false;
        }
        if(null == txtParentName.getText() || !(txtParentName.getText().matches("\\w+"))){
            JOptionPane.showMessageDialog(null, "HSN Code  "+txtParentName.getText() +" is not valid.");
            txtParentName.requestFocus();
            return false;
        }
    
        return true;
    }
    
    public boolean validateDetails(){

        if(null == txtRefenceNumber.getText() || (txtRefenceNumber.getText().equalsIgnoreCase(""))){
            JOptionPane.showMessageDialog(null, "Please enter reference number");
            return false;
        }

        
        else if(!(txtRefenceNumber.getText().trim().equals(""))){
            
            ComplaintDAO purchaseDAO = new ComplaintDAO();
            Complaint purchase = purchaseDAO.retrieveByRefNumber(txtRefenceNumber.getText().trim());
            if(purchase!=null){
                JOptionPane.showMessageDialog(null, "The reference number already exists.");
                return false;
            }
        }        
      
        return true;
    }
    
    public void populateItemDetails(){
        StudentDAO studentDAO = null;
        ClassMasterDAO classMasterDAO = new ClassMasterDAO();
        //Stock
        student = null;
        double dUnitGst=0.0;
        //double dUnitSellingPrice=0.0;
      
        try{
        
            if(!txtStudentName.getText().equalsIgnoreCase("")){
                studentDAO = new StudentDAO();
                student = studentDAO.retrieveByName(txtStudentName.getText().trim());
                ClassMaster classMaster = classMasterDAO.retrieveById(student.getClassId());

                txtParentName.setText(student.getGuardian());
                txtClass.setText(classMaster.getClassName()+"");
                txtComplaintNotes.requestFocus();
            }
     
         }catch(Exception e){
            System.out.println("----Error Block -"+e.getMessage());
        }
    }
    
        
    public void saveForm(){

        
        Complaint complaint = new Complaint();
        complaint.setReferenceNumber(Long.parseLong(txtRefenceNumber.getText()));
        complaint.setStudentName(txtStudentName.getText());
        complaint.setParentName(txtParentName.getText());
        complaint.setClassName(txtClass.getText());
        complaint.setLogDate(dtpComplaintLogDate.getDate());
        complaint.setResolutionDate(dtpResolutionDate.getDate());
        complaint.setComplaintNotes(txtComplaintNotes.getText());
        complaint.setStudentId(student.getStudentId());
        if(radNew.isSelected())
            complaint.setStatus("New");
        else if(radInProgress.isSelected())
            complaint.setStatus("In-progress");
        else
            complaint.setStatus("Resolved");
   
        System.out.println("----"+complaint.getReferenceNumber());
   
        complaint.setCreateTS(Calendar.getInstance().getTime());
        complaint.setUpdateTS(Calendar.getInstance().getTime());
        //complaint.setTotalAmount(Double.parseDouble(txtTotalAmount.getText()));
        
        ComplaintDAO complaintDAO =  new ComplaintDAO();
        for(int i=0; i<map.size();i++){
            System.out.println("--key :: "+map.keySet());
            System.out.println("--value :: "+map.values());
        }
        complaintDAO.insertIntoDB(complaint);
        
    }
    
    public void updateForm(){

        //SalesDAO billGenDAO =  new SalesDAO();
        //!@-- 03/15/2020
        deriveValuesFromPurchaseInput();
        
        Complaint complaint = new Complaint();
        complaint.setComplaintId(complaintIdEdit);
        complaint.setStudentId(studentIdEdit);
        complaint.setReferenceNumber(Long.parseLong(txtRefenceNumber.getText()));
        complaint.setLogDate(dtpComplaintLogDate.getDate());
        complaint.setResolutionDate(dtpResolutionDate.getDate());
        complaint.setStudentName(txtStudentName.getText());
        complaint.setClassName(txtClass.getText());
        complaint.setComplaintNotes(txtComplaintNotes.getText());
        complaint.setParentName(txtParentName.getText());
        if(radNew.isSelected())
            complaint.setStatus("New");
        else if(radInProgress.isSelected())
            complaint.setStatus("In-progress");
        else
            complaint.setStatus("Resolved");
             
        //complaint.setStatus("In-progress");
       
        System.out.println("Update----"+complaint.getReferenceNumber());
     
        ComplaintDAO complaintDAO =  new ComplaintDAO();
        for(int i=0; i<map.size();i++){
            System.out.println("--key :: "+map.keySet());
            System.out.println("--value :: "+map.values());
        }

        complaintDAO.updateRecord(complaint);
        
    }
    
    /*Color changing based on column value --!@# 14/05/2023*/
    public void changeTableRowColor(JTable table, int columnIndex){
        table.getColumnModel().getColumn(columnIndex).setCellRenderer(new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object obj, boolean isSelected, boolean hasFocus, int row, int column){
                final Component component = super.getTableCellRendererComponent(table, obj, isSelected, hasFocus, row, column);
                String status = table.getValueAt(row, 7).toString();
                Date resolDate=null;
                Date currDate = new Date();
                try {
                    resolDate = new SimpleDateFormat("yyyy-MM-dd").parse(table.getValueAt(row, 6).toString());
                } catch (ParseException ex) {
                    Logger.getLogger(ComplaintRegister.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if ("resolved".equalsIgnoreCase(status))
                    component.setBackground(Color.GREEN);
                    //component.setBackground(Color.getHSBColor(0, 204, 102));//GREEN
                else if (resolDate!= null && resolDate.compareTo(currDate)<0 && !"resolved".equalsIgnoreCase(status))
                    //component.setBackground(Color.getHSBColor(255, 51, 51));//RED
                    component.setBackground(Color.RED);
                else if("new".equalsIgnoreCase(status))
                    component.setBackground(Color.CYAN);
                    //component.setBackground(Color.getHSBColor(210, 100, 60));//BLUE
                else if ("in-progress".equalsIgnoreCase(status))
                    component.setBackground(Color.ORANGE);
                    //component.setBackground(Color.getHSBColor(255, 255, 51));//YELLOW
                else if (resolDate.compareTo(currDate)<0)
                    component.setBackground(Color.red);
               
                return component;
            }
            
        });
    }
    
    public void renderDataIntoTable(List<Complaint> complaintList){
        DefaultTableModel complaintModel = null;
        complaintModel = (DefaultTableModel) tblComplaint.getModel();
        System.out.println("-----"+complaintList.size());
        for(int i=0;i<complaintList.size();i++){
            
        complaintModel.addRow(new Object[]{complaintModel.getRowCount()+1, complaintList.get(i).getReferenceNumber()
                , complaintList.get(i).getStudentName(),complaintList.get(i).getParentName(), complaintList.get(i).getClassName()
                , complaintList.get(i).getLogDate() , complaintList.get(i).getResolutionDate(),complaintList.get(i).getStatus()
                , complaintList.get(i).getComplaintNotes(), complaintList.get(i).getComplaintId()});
        /*Color changing based on column value --!@# 14/05/2023*/
            changeTableRowColor(tblComplaint, 7);

        }
        tblComplaint.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events
                    syncDataFromTableToFields();
                }
            }
        });        
        
    }
    
    public void syncDataFromTableToFields(){
         Complaint complaint= null;
         System.out.println("--------INSIDE Edit-"+tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),0));
         complaintIdEdit = Integer.parseInt(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),tblComplaint.getColumnCount()-1).toString());
         ComplaintDAO complaintDAO = new ComplaintDAO();
         complaint = complaintDAO.retrieveById(complaintIdEdit);
         studentIdEdit = complaint.getStudentId();
         
         txtRefenceNumber.setText(complaint.getReferenceNumber()+"");
         txtStudentName.setText(complaint.getStudentName());
         txtClass.setText(complaint.getClassName());
         txtParentName.setText(complaint.getParentName());
         dtpComplaintLogDate.setDate(complaint.getLogDate());
         dtpResolutionDate.setDate(complaint.getResolutionDate());
         txtComplaintNotes.setText(complaint.getComplaintNotes());
         
         
         if("new".equals(complaint.getStatus().toLowerCase()))
             radNew.setSelected(true);
         else if("resolved".equals(complaint.getStatus().toLowerCase()))
             radResolved.setSelected(true);
         else
             radInProgress.setSelected(true);
             
         enableFormElements(true);
         btnSave.setText("Update");
         btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
     }
      
    public void renderPurchaseDataIntoTable(Stock stock){
       
        
        purchaseDetailsModel = (DefaultTableModel) tblComplaint.getModel();
        TableColumn idColumn = tblComplaint.getColumnModel().getColumn(tblComplaint.getColumnCount()-1);
        idColumn.setPreferredWidth(10);
        idColumn.setMaxWidth(10);
        
        TableColumn nameColumn = tblComplaint.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);

        if(purchaseDetailsModel != null){
            //purchaseDetailsModel.addRow(new Object[]{staff.getStaffType(), staff.getStaffName(), staff.getPhoneNumber(), staff.getRatePerHour(), staff.getStaffId()});
        //model.
                
        } 
        deriveValuesFromPurchaseInput();
    }
    
    public final void fetchComplaintDataIntoTable(Complaint complaint){
       // System.out.println("--Called fetchComplaintDataIntoTable"+complaint.getComplaintDetails().size());
        //initializeForm();
        //enableFormElements(true);
        tblComplaint.removeAll();
        tblComplaint.repaint();
        DefaultTableModel model = (DefaultTableModel) tblComplaint.getModel();
        model.setRowCount(0);
        
        //09/03/2020
        complaintIdEdit = complaint.getComplaintId();
        studentIdEdit = complaint.getStudentId();
        currentId = complaint.getComplaintId();
        btnSave.setText("Update");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
        //btnAddMore.setVisible(true);
        dtpComplaintLogDate.setEnabled(true);
        txtRefenceNumber.setEnabled(true);
        mnuComplaintActions.removeAll();
        
        //CORRECTION NEEDED FOR RETURN LOGIC - Return option is enabled at fetch details itself
        mitReturn = new JMenuItem("Return");
        mitReturn.addActionListener(this); 
        mnuComplaintActions.add(mitReturn);            
        SupplierDAO supplierDAO = new SupplierDAO();   
        //returnList =new ArrayList<PurchaseReturn>();    
   
        dtpComplaintLogDate.setDate(complaint.getLogDate());        
        txtRefenceNumber.setText(complaint.getReferenceNumber()+"");
    
        
        complaint.setComplaintId(complaintIdEdit);
      
    }
    
    public void deriveValuesFromPurchaseInput(){
      
        
      
    }
    
    public void clearItemFields(){
        txtStudentName.setText(null);
        txtParentName.setText(null);
        txtClass.setText(null);
        //txtQuantity.setText(null);
        //txtPurchasePrice.setText(null);
        //txtGstAmount.setText(null);
        //txtGstPercentage.setText(null);
        //lblAvailableQty.setText(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgComplaintStatus;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton cmdReset;
    private com.toedter.calendar.JDateChooser dtpComplaintLogDate;
    private com.toedter.calendar.JDateChooser dtpResolutionDate;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblHSNCode;
    private javax.swing.JLabel lblInvoiceNumber;
    private javax.swing.JLabel lblItemName;
    private javax.swing.JLabel lblUnitPrice;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JMenuItem mitReturn;
    private javax.swing.JPopupMenu mnuComplaintActions;
    private javax.swing.JPanel panStatus;
    private javax.swing.JPanel pnlPurchase;
    private javax.swing.JRadioButton radInProgress;
    private javax.swing.JRadioButton radNew;
    private javax.swing.JRadioButton radResolved;
    private javax.swing.JScrollPane spnPurchaseItems;
    private com.essar.dao.StockDAO stockDAO1;
    private javax.swing.JTable tblComplaint;
    private javax.swing.JTextField txtClass;
    private javax.swing.JTextArea txtComplaintNotes;
    private javax.swing.JTextField txtParentName;
    private javax.swing.JTextField txtRefenceNumber;
    private javax.swing.JTextField txtStudentName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
            if (menu == mitDelete) {
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE DELETE-"+tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),0));
                //Removes just the selected row from UI,  NOT from DB
                map.remove(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),7));
                System.out.println("map keys : "+map.keySet());
                GenericUtils.removeRowFromJTable(tblComplaint, purchaseDetailsModel);
                
                deriveValuesFromPurchaseInput();
            }else if (menu == mitReturn) {
                PurchaseReturn purchaseReturn = new PurchaseReturn();
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE PURCHASE RETURN "+txtRefenceNumber.getText());
                //Removes just the selected row from UI,  NOT from DB
                //System.out.println("Map Size ::" + map.size());
                purchaseReturn.setBillNumber(txtRefenceNumber.getText().trim());
                purchaseReturn.setItemName(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),1).toString());
                purchaseReturn.setCreateTS(Calendar.getInstance().getTime());
                purchaseReturn.setItemId(Long.parseLong(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),7).toString()));
                purchaseReturn.setNetAmount(Double.parseDouble(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),6).toString()));
                purchaseReturn.setQuantity(Double.parseDouble(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),5).toString()));
                purchaseReturn.setUpdateTS(Calendar.getInstance().getTime());
                purchaseReturn.setPurchaseId(complaintIdEdit);
                System.out.println("--Purchase Id --"+purchaseReturn.getPurchaseId());
                purchaseReturn.setPurchaseDetailsId(Long.parseLong(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),8).toString()));
                System.out.println("--Purchase DetailsId --"+purchaseReturn.getPurchaseDetailsId());
                //returnList.add(purchaseReturn);
                  
                /*if(map.size()>0){
                    map.remove(tblSalesDetails.getModel().getValueAt(tblSalesDetails.getSelectedRow(),7));
                }
                System.out.println("map keys : "+map.keySet());*/
                GenericUtils.removeRowFromJTable(tblComplaint, purchaseDetailsModel);
                deriveValuesFromPurchaseInput();
                
            }
            else if (menu == mitEdit){
                double exQuantity = 0;
                double refQuantity = 0;
                PurchaseReturn purchaseReturn = new PurchaseReturn();
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE EDIT "+txtRefenceNumber.getText());
                //Removes just the selected row from UI,  NOT from DB
                //System.out.println("Map Size ::" + map.size());
                enableFormElements(true);
                //======Populating item details for editing
                //txtHSNCode.setText(tblSalesDetails.getModel().getValueAt(tblSalesDetails.getSelectedRow(),0).toString());
                purchaseReturn.setItemName(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),1).toString());
                //--!@#--18/11/2022-- exQuantity, refQuantity calculation to Reduce/Add the difference in quantity to reflect in stock - line 1893 is commented and 1894 is added
                exQuantity = Double.parseDouble(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),5).toString());
                //refQuantity = exQuantity - Double.parseDouble(txtQuantity.getText());
                enableFormElements(true);
                SuggestionExampleMain.populateItemNames(this, txtStudentName);
                txtStudentName.setText(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),1).toString());
                txtStudentName.requestFocus();
                //########
                purchaseReturn.setBillNumber(txtRefenceNumber.getText().trim());
                purchaseReturn.setItemName(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),1).toString());
                purchaseReturn.setCreateTS(Calendar.getInstance().getTime());
                purchaseReturn.setItemId(Long.parseLong(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),7).toString()));
                purchaseReturn.setNetAmount(Double.parseDouble(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),6).toString()));
                purchaseReturn.setQuantity(Double.parseDouble(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),5).toString()));
                //purchaseReturn.setQuantity(refQuantity);
                
                purchaseReturn.setUpdateTS(Calendar.getInstance().getTime());
                purchaseReturn.setPurchaseId(complaintIdEdit);
                System.out.println("--Purchase Id --"+purchaseReturn.getPurchaseId());
                purchaseReturn.setPurchaseDetailsId(Long.parseLong(tblComplaint.getModel().getValueAt(tblComplaint.getSelectedRow(),8).toString()));
                System.out.println("--Purchase DetailsId --"+purchaseReturn.getPurchaseDetailsId());
                //returnList.add(purchaseReturn);

                GenericUtils.removeRowFromJTable(tblComplaint, purchaseDetailsModel);
                deriveValuesFromPurchaseInput();
                
            } 
        }catch(Exception e){
            System.out.println("---"+e.getMessage());
            //JOptionPane.showMessageDialog(null, e.getMessage());
        }
       
    }
}

class MyTableCeellRenderer extends DefaultTableCellRenderer{
    @Override
    public Color getBackground(){
        return super.getBackground();
    }
}
