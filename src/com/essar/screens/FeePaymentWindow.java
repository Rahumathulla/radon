/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.AttDAO;
import com.essar.dao.ClassMasterDAO;
import com.essar.dao.FeesDAO;
import com.essar.dao.SettingsDAO;
import com.essar.dao.StudentDAO;
import com.essar.dao.WorkLogDAO;
import com.essar.pojos.Attendance;
import com.essar.pojos.AttDetails;
import com.essar.pojos.ClassMaster;
import com.essar.pojos.Fees;
import com.essar.pojos.Fees;
import com.essar.pojos.Student;
import com.essar.pojos.WorkLogDetails;
import com.essar.utils.TableMouseListener;
import com.essar.utils.GenericUtils;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author rahumathulla
 */
public class FeePaymentWindow extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form ProductCategory
     */
    long studentId=0;
    long attendanceId = 0;
    long worklogId = 0;
    long feesId = 0;
    double dTotalMonths=0;
    double dPayableAmount=0;
    double dPaidMount=0;
    DefaultTableModel feessModel = null;
    DefaultTableModel worklogModel = null;
    Student gStudentObj;
    DecimalFormat df = new DecimalFormat("##,##,###.##");
    SimpleDateFormat indianFormat = new SimpleDateFormat("dd/MM/yyyy");
    SimpleDateFormat sqlFormat = new SimpleDateFormat("yyyy-MM-dd");
    public FeePaymentWindow() {
        initComponents();
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        mnuCustomer = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        pnlPayments = new javax.swing.JPanel();
        panFees = new javax.swing.JScrollPane();
        tblFees = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTotalPaidAmount = new javax.swing.JLabel();
        cmbStudentName = new javax.swing.JComboBox();
        lblStaffName1 = new javax.swing.JLabel();
        lblHSNCode = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        lblStaffType = new javax.swing.JLabel();
        txtGuardian = new javax.swing.JTextField();
        lblJoiningDate = new javax.swing.JLabel();
        txtDateOfAdmission = new javax.swing.JTextField();
        panPay = new javax.swing.JPanel();
        lblPaymentDate1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtComments = new javax.swing.JTextArea();
        lblPaymentDate = new javax.swing.JLabel();
        lblPaymentAmount = new javax.swing.JLabel();
        txtFeesAmount = new javax.swing.JTextField();
        dtpFeesDate = new com.toedter.calendar.JDateChooser();
        btnRemitFees = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtReceiptNumber = new javax.swing.JTextField();
        lblClass1 = new javax.swing.JLabel();
        cmbClass = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        lblTotalMonthsPayable = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblTotalPayableAmount = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblTuitionFeesPerMonth = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblBalanceOS = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        mitDelete.setText("jMenuItem1");

        mitEdit.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fees Register");
        setBackground(new java.awt.Color(102, 153, 255));
        setExtendedState(6);
        setName("frmProductCategory"); // NOI18N

        panFees.setBackground(new java.awt.Color(0, 102, 102));
        panFees.setForeground(new java.awt.Color(0, 153, 153));

        tblFees.setForeground(new java.awt.Color(0, 102, 102));
        tblFees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sl No", "Payment Date", "Receipt Number", "Amount", "Payment Note", "StaffId", "PaymentId"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        panFees.setViewportView(tblFees);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 153));
        jLabel7.setText("Fees Collection Sheet");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Total Amount Paid :");

        lblTotalPaidAmount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTotalPaidAmount.setForeground(new java.awt.Color(102, 102, 255));
        lblTotalPaidAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalPaidAmount.setText("0.0");

        javax.swing.GroupLayout pnlPaymentsLayout = new javax.swing.GroupLayout(pnlPayments);
        pnlPayments.setLayout(pnlPaymentsLayout);
        pnlPaymentsLayout.setHorizontalGroup(
            pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPaymentsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlPaymentsLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalPaidAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(panFees, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        pnlPaymentsLayout.setVerticalGroup(
            pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPaymentsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panFees, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblTotalPaidAmount)
                    .addComponent(jLabel7))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        cmbStudentName.setForeground(new java.awt.Color(0, 102, 255));
        cmbStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStudentNameActionPerformed(evt);
            }
        });
        cmbStudentName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbStudentNameKeyPressed(evt);
            }
        });

        lblStaffName1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblStaffName1.setText("Student Name");

        lblHSNCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblHSNCode.setText("Phone Number");

        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPhone.setForeground(new java.awt.Color(0, 102, 255));

        lblStaffType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblStaffType.setText("Guardian");

        txtGuardian.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtGuardian.setForeground(new java.awt.Color(0, 102, 255));

        lblJoiningDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblJoiningDate.setText("Date of Admission");

        txtDateOfAdmission.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDateOfAdmission.setForeground(new java.awt.Color(0, 102, 255));

        panPay.setBorder(javax.swing.BorderFactory.createTitledBorder("Fee Remittance"));

        lblPaymentDate1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPaymentDate1.setText("Payment Notes");

        txtComments.setColumns(10);
        txtComments.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txtComments.setRows(3);
        txtComments.setTabSize(3);
        jScrollPane4.setViewportView(txtComments);

        lblPaymentDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPaymentDate.setText("Date");

        lblPaymentAmount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPaymentAmount.setText("Payment Amount");

        txtFeesAmount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtFeesAmount.setForeground(new java.awt.Color(0, 153, 153));

        dtpFeesDate.setDateFormatString("dd/MM/yyyy");

        btnRemitFees.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRemitFees.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sales.png"))); // NOI18N
        btnRemitFees.setMnemonic('P');
        btnRemitFees.setText("Remit Fees");
        btnRemitFees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemitFeesActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Receipt Number");

        txtReceiptNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtReceiptNumber.setToolTipText("");

        javax.swing.GroupLayout panPayLayout = new javax.swing.GroupLayout(panPay);
        panPay.setLayout(panPayLayout);
        panPayLayout.setHorizontalGroup(
            panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panPayLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblPaymentAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblPaymentDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtFeesAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dtpFeesDate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRemitFees, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtReceiptNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        panPayLayout.setVerticalGroup(
            panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panPayLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtReceiptNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFeesAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPaymentAmount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPaymentDate)
                    .addComponent(dtpFeesDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panPayLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lblPaymentDate1))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemitFees, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        lblClass1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblClass1.setText("Class");

        cmbClass.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClassActionPerformed(evt);
            }
        });
        cmbClass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbClassKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Number of Months :");

        lblTotalMonthsPayable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTotalMonthsPayable.setForeground(new java.awt.Color(255, 153, 153));
        lblTotalMonthsPayable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalMonthsPayable.setText("0.0");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Total Payable Amount :");

        lblTotalPayableAmount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTotalPayableAmount.setForeground(new java.awt.Color(0, 153, 102));
        lblTotalPayableAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalPayableAmount.setText("0.0");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Tuition Fees/Month :");

        lblTuitionFeesPerMonth.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTuitionFeesPerMonth.setForeground(new java.awt.Color(0, 153, 204));
        lblTuitionFeesPerMonth.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTuitionFeesPerMonth.setText("0.0");

        jLabel4.setFont(new java.awt.Font("Adobe Fangsong Std R", 1, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Balance O/S");

        lblBalanceOS.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblBalanceOS.setForeground(new java.awt.Color(204, 102, 0));
        lblBalanceOS.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBalanceOS.setText("0.0");

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblBalanceOS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblHSNCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblStaffName1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblStaffType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblJoiningDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblClass1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cmbStudentName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPhone)
                                .addComponent(txtGuardian, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cmbClass, javax.swing.GroupLayout.Alignment.TRAILING, 0, 200, Short.MAX_VALUE)
                                .addComponent(txtDateOfAdmission)
                                .addComponent(lblTotalPayableAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTuitionFeesPerMonth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTotalMonthsPayable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(panPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(btnCancel)
                        .addGap(123, 123, 123))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlPayments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblClass1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStaffName1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHSNCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtGuardian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStaffType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblJoiningDate)
                    .addComponent(txtDateOfAdmission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTuitionFeesPerMonth)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(lblTotalMonthsPayable))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotalPayableAmount)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBalanceOS, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(356, 356, 356))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(pnlPayments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void cmbStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStudentNameActionPerformed
        // TODO add your handling code here:
        performTableRefresh();
        performStudentSelectionAction();
        
    }//GEN-LAST:event_cmbStudentNameActionPerformed

    private void cmbStudentNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbStudentNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStudentNameKeyPressed

    private void btnRemitFeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemitFeesActionPerformed
        // TODO add your handling code here:
        if(btnRemitFees.getText().equalsIgnoreCase("save")){
            System.out.println("inside save");
            if(validateFeesForm()){
                System.out.println("validation SUCCESS");
                FeesDAO feesDAO = new FeesDAO();
                Fees fees = new Fees();
                fees.setStudentId(gStudentObj.getStudentId());
                fees.setAmount(Double.parseDouble(txtFeesAmount.getText()));
                fees.setDescription(txtComments.getText());
                fees.setFeesDate(dtpFeesDate.getDate());
                fees.setReceiptNumber(Long.parseLong(txtReceiptNumber.getText()));
                feesDAO.insertIntoDB(fees);
                //fetchFeesData();
                performTableRefresh();
                performStudentSelectionAction();
                enableFeesElements(false);
            }
        }else{
            enableFeesElements(true);
            SettingsDAO settingsDAO = new SettingsDAO();
            txtReceiptNumber.setText(settingsDAO.generateStudentFeesReceiptNumber()+"");
        }

        
    }//GEN-LAST:event_btnRemitFeesActionPerformed

    private void cmbClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClassActionPerformed
        // TODO add your handling code here:
        resetAmountFields();
        cmbStudentName.setSelectedItem(null);
        cmbStudentName.removeAllItems();
        if(null!=cmbClass.getSelectedItem()){
            StudentDAO studentDAO = new StudentDAO();
            String sql = "SELECT * FROM student where class_id ="+((ClassMaster)(cmbClass.getSelectedItem())).getClassMasterId();
            System.out.println("Query :"+sql);
            renderStudentDataIntoDropDown(studentDAO.retrieveByQuery(sql));
        }
    }//GEN-LAST:event_cmbClassActionPerformed

    private void cmbClassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbClassKeyPressed
        // TODO add your handling code here:
  
    }//GEN-LAST:event_cmbClassKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FeePaymentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FeePaymentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FeePaymentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FeePaymentWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FeePaymentWindow().setVisible(true);
            }
        });
    }
    
    public void initializeForm(){
        DefaultTableModel model = (DefaultTableModel) tblFees.getModel();        
        model.setRowCount(0);
        //DefaultTableModel workLogModel = (DefaultTableModel) tblWorkLog.getModel();        
        //workLogModel.setRowCount(0);
        //panPay.setEnabled(false);
        txtPhone.setEditable(false);
        txtDateOfAdmission.setEditable(false);
        txtGuardian.setEditable(false);
        enableFeesElements(false);
        
        //btnSave.setText("New");
        //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        //btnSave.requestFocus();
        
        //txtStudentName.setText("");
        //txtStudentPhone.setText("");
        //txtAddress.setText("");
     
        //tblProductCategory.re();
        //tblCategory.remove(panPricingTier);
        enableFormElements(false);
        //StudentDAO studentDAO = new StudentDAO();
        //renderDataIntoTable(studentDAO.retrieveAll());
        
        ClassMasterDAO classMasterDAO = new ClassMasterDAO();
        renderClassDataIntoDropDown(classMasterDAO.retrieveAll());
        


        mnuCustomer = new JPopupMenu();
        
        mitEdit = new JMenuItem("Edit");
        mitEdit.addActionListener(this);
        
        mitDelete = new JMenuItem("Delete");
        mitDelete.addActionListener(this);
        
        mnuCustomer.add(mitEdit);
        mnuCustomer.add(mitDelete);
         // sets the popup menu for the table
        tblFees.setComponentPopupMenu(mnuCustomer);      
        tblFees.addMouseListener(new TableMouseListener(tblFees));
        
        /*TableColumn slNumberColumn = tblWorkLog.getColumnModel().getColumn(0);
        slNumberColumn.setPreferredWidth(60);
        slNumberColumn.setMinWidth(60);
        slNumberColumn.setMaxWidth(60);
        
        TableColumn dateColumn = tblWorkLog.getColumnModel().getColumn(1);
        dateColumn.setPreferredWidth(100);
        dateColumn.setMinWidth(100);
        dateColumn.setMaxWidth(100);
        
        TableColumn hrColumn = tblWorkLog.getColumnModel().getColumn(2);
        hrColumn.setPreferredWidth(140);
        hrColumn.setMinWidth(140);
        hrColumn.setMaxWidth(140);
        
        TableColumn rateColumn = tblWorkLog.getColumnModel().getColumn(3);
        rateColumn.setPreferredWidth(100);
        rateColumn.setMinWidth(100);
        rateColumn.setMaxWidth(100);
        
        TableColumn netAmtColumn = tblWorkLog.getColumnModel().getColumn(4);
        netAmtColumn.setPreferredWidth(140);
        netAmtColumn.setMinWidth(140);
        netAmtColumn.setMaxWidth(140);*/
        

        
        TableColumn idColumn1 = tblFees.getColumnModel().getColumn(tblFees.getColumnCount()-1);
        idColumn1.setPreferredWidth(0);
        idColumn1.setMinWidth(0);
        idColumn1.setMaxWidth(0);
        
        TableColumn studentIdColumn = tblFees.getColumnModel().getColumn(tblFees.getColumnCount()-2);
        studentIdColumn.setPreferredWidth(0);
        studentIdColumn.setMinWidth(0);
        studentIdColumn.setMaxWidth(0);       

        
        TableColumn slNo = tblFees.getColumnModel().getColumn(0);
        slNo.setPreferredWidth(90);
        slNo.setMinWidth(90);
        slNo.setMaxWidth(90);
        
        TableColumn dateCol = tblFees.getColumnModel().getColumn(1);
        dateCol.setPreferredWidth(160);
        dateCol.setMinWidth(160);
        dateCol.setMaxWidth(160);
//        
//        TableColumn classIdColumn = tblFeess.getColumnModel().getColumn(tblFeess.getColumnCount()-4);
//        classIdColumn.setPreferredWidth(0);
//        classIdColumn.setMinWidth(0);
//        classIdColumn.setMaxWidth(0);
        
//        TableColumn attColumn = tblFeess.getColumnModel().getColumn(5);
//        attColumn.setPreferredWidth(90);
//        attColumn.setMinWidth(90);
//        attColumn.setMaxWidth(90);
        
        TableColumn phoneNumberColumn = tblFees.getColumnModel().getColumn(1);
        phoneNumberColumn.setPreferredWidth(60);
        phoneNumberColumn.setMinWidth(60);
        
        
        /*TableColumn workLogDetIdColumn = tblWorkLog.getColumnModel().getColumn(tblWorkLog.getColumnCount()-1);
        workLogDetIdColumn.setPreferredWidth(0);
        workLogDetIdColumn.setMinWidth(0);
        workLogDetIdColumn.setMaxWidth(0);
        
        TableColumn workLogIdColumn = tblWorkLog.getColumnModel().getColumn(tblWorkLog.getColumnCount()-2);
        workLogIdColumn.setPreferredWidth(0);
        workLogIdColumn.setMinWidth(0);
        workLogIdColumn.setMaxWidth(0); */

        studentId =0;
   
    }
    
    public void performTableRefresh(){
        dTotalMonths=0;
        dPayableAmount=0;
        dPaidMount=0;
        //fetchWorklogData();
        fetchFeesData();
        lblTotalMonthsPayable.setText(dTotalMonths+"");
        lblTotalPayableAmount.setText(dPayableAmount+"");
        lblTotalPaidAmount.setText(dPaidMount+"");
        lblBalanceOS.setText(dPayableAmount-dPaidMount+"");
    }
    
    public void enableFormElements(boolean flag){
        //txtStudentName.setEnabled(flag);
        //dtpDate.setEnabled(flag);
        //cmbClass.setEnabled(flag);
        //cmbStudentName.setEnabled(flag);
        //cmbStudent.setEnabled(flag);
        /*if(!flag){
            btnSave.setText("New");
            btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        }*/
    }
    public void enableFeesElements(boolean flag){
        txtComments.setEnabled(flag);
        dtpFeesDate.setEnabled(flag);
        txtFeesAmount.setEnabled(flag);
        txtReceiptNumber.setEnabled(flag);
        if(flag){
            btnRemitFees.setText("Save");
            btnRemitFees.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
            txtFeesAmount.requestFocus();
            if(null==dtpFeesDate.getDate()){
                dtpFeesDate.setDate(new Date());
            }
            txtFeesAmount.setText("");
            txtComments.setText("");
        }else{
            btnRemitFees.setText("Remit");
            btnRemitFees.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sales.png")));
        }

    }
    public boolean validateFeesForm(){
        //btnSave.setText("Add");
        //btnSave.requestFocus();
        if(null == txtFeesAmount.getText() || "".equals(txtFeesAmount.getText()) || !(txtFeesAmount.getText().matches("^\\d*\\.\\d+|\\d+|\\d+\\.\\d*$"))){
            JOptionPane.showMessageDialog(null, "Amount "+txtFeesAmount.getText() +" is not valid.");
            txtFeesAmount.requestFocus();
            return false;
        }
        
        if(null == txtReceiptNumber.getText() || "".equals(txtReceiptNumber.getText())){
            JOptionPane.showMessageDialog(null, "Receipt Number "+txtFeesAmount.getText() +" is not valid.");
            txtReceiptNumber.requestFocus();
            return false;
        }
        if(null == gStudentObj || gStudentObj.getStudentId()<=0 ){
            JOptionPane.showMessageDialog(null, "Please select student name");
            return false;
        }
        if(null == dtpFeesDate.getDate() ){
            JOptionPane.showMessageDialog(null, "Please select the date");
            dtpFeesDate.requestFocus();
            return false;
        }
        
        
        //txtProductCategoryName.setText("");
        return true;
    }
    
   
    
     public void renderClassDataIntoDropDown(List<ClassMaster> classMasterList){
         
        ClassMaster classMaster = null;
        cmbClass.removeAllItems();
        if(classMasterList!= null){
            for(int i=0; i<classMasterList.size();i++){
                cmbClass.addItem(classMasterList.get(i));
            }
            cmbClass.setSelectedIndex(0);
            classMaster = (ClassMaster)cmbClass.getSelectedItem();            
        }  
    }
    
    public void renderStudentDataIntoDropDown(List<Student> studentList){
        if(!studentList.isEmpty()){
            cmbStudentName.removeAllItems();
            if(studentList!= null){
                for(int i=0; i<studentList.size();i++){
                    cmbStudentName.addItem(studentList.get(i));
                }
                cmbStudentName.setSelectedIndex(0);
                //incomeExpense = (IncomeExpense)cmbParticularName.getSelectedItem();            
            }
        }
    }
    
    public void renderDataIntoTable(List<Student> studentList){
        
        feessModel = (DefaultTableModel) tblFees.getModel();
        //!@--17/03/2020 Setting id column width to 0;
        /*TableColumn idColumn1 = tblFeess.getColumnModel().getColumn(tblFeess.getColumnCount()-1);
        idColumn1.setPreferredWidth(90);
        idColumn1.setMinWidth(90);
        idColumn1.setMaxWidth(90);
        
        TableColumn slNumberColumn = tblFeess.getColumnModel().getColumn(0);
        slNumberColumn.setPreferredWidth(60);
        slNumberColumn.setMinWidth(60);
        slNumberColumn.setMaxWidth(60);*/

        for(int i=0;i<studentList.size();i++){
            feessModel.addRow(new Object[]{feessModel.getRowCount()+1, studentList.get(i).getStudentName(),studentList.get(i).getGender(),studentList.get(i).getGuardian(), studentList.get(i).getContactNumber(), Boolean.TRUE,studentList.get(i).getClassId(), studentList.get(i).getStudentId()});
            /*if(studentList.get(i).getQuantity()>0){
                dStockValue += studentList.get(i).getPurchasePrice()*stockList.get(i).getQuantity();
                dSalesValue += studentList.get(i).getSellingPrice()*stockList.get(i).getQuantity();
            }else{
                iSkipped++;
            }*/
            
        }

        TableColumn nameColumn = tblFees.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        tblFees.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events              
                    syncDataFromViewToTable();
                }
            }
        });
        
    }
    
   /* public void renderWorklogDataIntoTable(List<WorkLogDetails> workLogDetailsList){
        
        worklogModel = (DefaultTableModel) tblWorkLog.getModel();

        for(int i=0;i<workLogDetailsList.size();i++){
            worklogModel.addRow(new Object[]{worklogModel.getRowCount()+1, workLogDetailsList.get(i).getUpdateTS()
                    , workLogDetailsList.get(i).getHoursWorked(),workLogDetailsList.get(i).getRatePerHour(), workLogDetailsList.get(i).getNetAmount()
                    //, workLogDetailsList.get(i).getPhoneNumber(),workLogDetailsList.get(i).getStudentId()
                    , workLogDetailsList.get(i).getWorkLogId(), workLogDetailsList.get(i).getWorkLogDetailsId()});
            dTotalMonths = dTotalMonths + workLogDetailsList.get(i).getHoursWorked();
            dPayableAmount = dPayableAmount + workLogDetailsList.get(i).getNetAmount();
           
        }
        TableColumn nameColumn = tblWorkLog.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        tblWorkLog.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events              
                    syncDataFromViewToTable();
                }
            }
        });
        
    }*/
    
    public void renderFeesDataIntoTable(List<Fees> feesList){
        
        feessModel = (DefaultTableModel) tblFees.getModel();
        for(int i=0;i<feesList.size();i++){
            feessModel.addRow(new Object[]{feessModel.getRowCount()+1, feesList.get(i).getFeesDate()
                    , feesList.get(i).getReceiptNumber()
                    , feesList.get(i).getAmount()
                    , feesList.get(i).getDescription()
                    , feesList.get(i).getStudentId(), feesList.get(i).getFeesId()});
            dPaidMount = dPaidMount + feesList.get(i).getAmount();
           
        }
        TableColumn nameColumn = tblFees.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        
        tblFees.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events              
                    syncDataFromViewToTable();
                }
            }
        });
        
    }
    
    public void resetAmountFields(){
        lblTotalMonthsPayable.setText("0");
        lblBalanceOS.setText("0");
        lblTotalPaidAmount.setText("0");
        lblTotalPayableAmount.setText("0");
        lblTuitionFeesPerMonth.setText("0");
        
    }
    
    public void fetchAttendanceStatus(){
        /*Date attendanceDate=null;
        if(null==dtpDate.getDate())
            dtpDate.setDate(currDate);
        try {
            attendanceDate = new SimpleDateFormat("yyyy-MM-dd").parse(currDate.getTime());
        } catch (ParseException ex) {
            Logger.getLogger(ComplaintRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(attendanceDate.compareTo(currDate)<0){
            JOptionPane.showMessageDialog(this, "You cannot mark attendance of a future date.!");
        }else{*/
        tblFees.removeAll();
        tblFees.repaint();
        feessModel=(DefaultTableModel)tblFees.getModel();
        feessModel.setRowCount(0);
            try{
                SimpleDateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat indianFormat = new SimpleDateFormat ("dd/MM/yyyy");
                String attDate="";
                String query = "";
                studentId = 0;
                //((ClassMaster)(cmbClass.getSelectedItem())).getClassMasterId();
                //System.out.println("-----CLASS ID :: "+studentId);
                //====06/18 : Brought here from New button action
                query = "SELECT * from student where class_id="+studentId;
                StudentDAO studentDAO = new StudentDAO();
                renderDataIntoTable(studentDAO.retrieveByQuery(query));
                attendanceId = 0;


                //#######
            }catch(Exception e){
                System.out.println("-- "+e.getMessage());
            }
        //}
    }
    
    public void fetchWorklogData(){
        
        //tblWorkLog.removeAll();
        //tblWorkLog.repaint();
        tblFees.removeAll();
        tblFees.repaint();
        //worklogModel=(DefaultTableModel)tblWorkLog.getModel();
        //worklogModel.setRowCount(0);
        //Student student=null;
        gStudentObj = null;
            try{
                SimpleDateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat indianFormat = new SimpleDateFormat ("dd/MM/yyyy");
                //String attDate="";
                String query = "";
                //StudentDAO studentDAO = new StudentDAO();
                gStudentObj  = ((Student)(cmbStudentName.getSelectedItem()));      
                studentId = gStudentObj.getStudentId();
               // txtGuardian.setText(gStudentObj.getStudentType());
               // txtPhone.setText(gStudentObj.getPhoneNumber());
                //txtDateOfBirth.setText(gStudentObj.getJoiningDate().toString());
                
                //System.out.println("-----CLASS ID :: "+studentId);
                //====06/18 : Brought here from New button action
                query = "SELECT wd.*, w.work_date from work_log_details wd"
                        + " JOIN work_log w ON wd.work_log_id = w.work_log_id WHERE  wd.student_id="+studentId+" ORDER BY w.work_date DESC";
                System.out.println("QUERY : "+query);
                WorkLogDAO workLogDAO = new WorkLogDAO();
                /*List<WorkLogDetails> workLogDetailList = workLogDAO.retrieveStudentWorkLogsByQuery(query);
                if(!workLogDetailList.isEmpty()){
                    System.out.println("Work Log Details Count :: "+workLogDetailList.size());
                    //attendanceId = attendance.getAttendanceId();
                    renderWorklogDataIntoTable(workLogDetailList);
                }*/
                //#######
            }catch(Exception e){
                System.out.println("-- "+e.getMessage());
            }
        //}
    }
    
    public void fetchFeesData(){
        
        tblFees.removeAll();
        tblFees.repaint();
        feessModel=(DefaultTableModel)tblFees.getModel();
        feessModel.setRowCount(0);
        //Student student=null;
            try{
                SimpleDateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat indianFormat = new SimpleDateFormat ("dd/MM/yyyy");
                String attDate="";
                String query = "";
                StudentDAO studentDAO = new StudentDAO();
                gStudentObj  = ((Student)(cmbStudentName.getSelectedItem()));      
                studentId = gStudentObj.getStudentId();
                //txtGuardian.setText(gStudentObj.getStudentType());
                //txtPhone.setText(gStudentObj.getPhoneNumber());
                //txtDateOfBirth.setText(gStudentObj.getJoiningDate().toString());
                
                //System.out.println("-----CLASS ID :: "+studentId);
                //====06/18 : Brought here from New button action
                query = "SELECT * FROM fees WHERE  student_id="+studentId+" ORDER BY fees_date DESC";
                System.out.println("QUERY : "+query);
                FeesDAO feesDAO = new FeesDAO();
                List<Fees> feesList = feesDAO.retrieveByQuery(query);
                if(!feesList.isEmpty()){
                    System.out.println("Fees Details Count :: "+feesList.size());
                    //attendanceId = attendance.getAttendanceId();
                    renderFeesDataIntoTable(feesList);
                }
                //#######
            }catch(Exception e){
                System.out.println("-- "+e.getMessage());
            }
        //}
    }
    public void saveAttendanceForm(){
 
        Attendance attendance = new Attendance();
        //attendance.setAttendanceDate(dtpDate.getDate());
        //attendance.setTakenBy(txtStudentName.getText());
        //attendance.setClassId(((ClassMaster) cmbClass.getSelectedItem()).getClassMasterId());
        AttDetails attendanceDetails;
        System.out.println("Save Logic :: ");
        List<AttDetails> attendanceDetailsList = new ArrayList<>();
        for (int i=0; i<tblFees.getRowCount();i++){
            attendanceDetails = new AttDetails();
            //attendanceDetails.setStudentId(Long.parseLong(tblFeess.getValueAt(i, 7).toString()));
            attendanceDetails.setStudentName(tblFees.getValueAt(i, 1).toString());
            attendanceDetails.setGender(tblFees.getValueAt(i, 2).toString());
            attendanceDetails.setGuardian(tblFees.getValueAt(i, 3).toString());
            attendanceDetails.setPhoneNumber(tblFees.getValueAt(i, 4).toString());
            attendanceDetails.setClassId(Long.parseLong(tblFees.getValueAt(i, 6).toString()));
            attendanceDetails.setStudentId(Long.parseLong(tblFees.getValueAt(i, 7).toString()));
            System.out.println("======"+attendanceDetails.getStudentId());
            if((Boolean)tblFees.getValueAt(i, 5)==true)
                attendanceDetails.setStatus("P");
            else
                attendanceDetails.setStatus("A");
            attendanceDetailsList.add(attendanceDetails);
        }
        attendance.setAttendanceDetails(attendanceDetailsList);
        AttDAO attendanceDAO = new  AttDAO();
        attendanceDAO.insertIntoDB(attendance, false);
        
        
    }
     /*public void updateAttendanceForm(){
 
       Attendance attendance = new Attendance();
        attendance.setAttendanceDate(dtpDate.getDate());
        attendance.setTakenBy(txtStudentName.getText());
        attendance.setClassId(((ClassMaster) cmbClass.getSelectedItem()).getClassMasterId());
        attendance.setAttendanceId(attendanceId);
        AttDetails attendanceDetails;
        System.out.println("Update Logic :: ");
        List<AttDetails> attendanceDetailsList = new ArrayList<>();
        for (int i=0; i<tblFeess.getRowCount();i++){
            attendanceDetails = new AttDetails();
            //attendanceDetails.setStudentId(Long.parseLong(tblFeess.getValueAt(i, 7).toString()));
            attendanceDetails.setStudentName(tblFeess.getValueAt(i, 1).toString());
            attendanceDetails.setGender(tblFeess.getValueAt(i, 2).toString());
            attendanceDetails.setGuardian(tblFeess.getValueAt(i, 3).toString());
            attendanceDetails.setPhoneNumber(tblFeess.getValueAt(i, 4).toString());
            attendanceDetails.setClassId(Long.parseLong(tblFeess.getValueAt(i, 6).toString()));
            attendanceDetails.setStudentId(Long.parseLong(tblFeess.getValueAt(i, 7).toString()));
            System.out.println("======"+attendanceDetails.getStudentId());
            if((Boolean)tblFeess.getValueAt(i, 5)==true)
                attendanceDetails.setStatus("P");
            else
                attendanceDetails.setStatus("A");
            attendanceDetailsList.add(attendanceDetails);
        }
        attendance.setAttendanceDetails(attendanceDetailsList);
        AttDAO attendanceDAO = new  AttDAO();
        attendanceDAO.updateDB(attendance, false);
        
    }
    */
    
    public void performStudentSelectionAction (){
        btnRemitFees.setText("Remit Fees");
        btnRemitFees.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sales.png")));
        if(null!=cmbStudentName.getSelectedItem()){
            gStudentObj = (Student)cmbStudentName.getSelectedItem();
            String formattedDate="";
            StudentDAO studentDAO = new StudentDAO();
            Student student = studentDAO.retrieveById(((Student)cmbStudentName.getSelectedItem()).getStudentId());
            txtPhone.setText(student.getContactNumber());
            txtGuardian.setText(student.getGuardian());
            formattedDate = indianFormat.format(student.getAdmissionDate());
            txtDateOfAdmission.setText(formattedDate);
            long duration = GenericUtils.durationMonths(LocalDate.parse(sqlFormat.format(student.getAdmissionDate()))
                    , LocalDate.parse(sqlFormat.format(new Date())))+1;//one is added for advance fees of fees
            System.out.println("------------"+duration);
            dTotalMonths = duration;
            dPayableAmount = duration * student.getFeesPercentage();
            //if(duration > 0 && student.getFeesPercentage()>0){
                lblTotalPayableAmount.setText(df.format(dPayableAmount));
                lblTuitionFeesPerMonth.setText(df.format(student.getFeesPercentage()));
                lblTotalMonthsPayable.setText(dTotalMonths+"");
                lblBalanceOS.setText(df.format(dPayableAmount-dPaidMount));           
           
        }
    }
   
    public void syncDataFromViewToTable(){
                //int rowIndex = tblSupplier.getSelectedRow();
        Student student = null;
        System.out.println("--------INSIDE Edit-"+tblFees.getModel().getValueAt(tblFees.getSelectedRow(),0));
        studentId = Integer.parseInt(tblFees.getModel().getValueAt(tblFees.getSelectedRow(),tblFees.getColumnCount()-1).toString());
        StudentDAO customerDAO = new StudentDAO();
        student = customerDAO.retrieveById(studentId);
        System.out.println("--"+student.getStudentName());
        //txtStudentName.setText(student.getStudentName());
         /*for(int i=0; i<cmbClass.getItemCount();i++){
            if((cmbClass.getSelectedItem().toString()).equalsIgnoreCase(student.getStudentType())){
                cmbClass.setSelectedItem(cmbClass.getItemAt(i));
            }
        }
        cmbClass.setSelectedItem(student.getStudentType());*/
        //txtRatePerHour.setText(student.getRatePerHour()+"");
        //txtStudentPhone.setText(student.getPhoneNumber()+"");
        //txtAddress.setText(student.getAddress());
        //dtpDate.setDate(student.getJoiningDate());
        enableFormElements(true);
        //btnSave.setText("Save");
        //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
        //btnSave.setText("Update");
        //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRemitFees;
    private javax.swing.JComboBox cmbClass;
    private javax.swing.JComboBox cmbStudentName;
    private com.toedter.calendar.JDateChooser dtpFeesDate;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblBalanceOS;
    private javax.swing.JLabel lblClass1;
    private javax.swing.JLabel lblHSNCode;
    private javax.swing.JLabel lblJoiningDate;
    private javax.swing.JLabel lblPaymentAmount;
    private javax.swing.JLabel lblPaymentDate;
    private javax.swing.JLabel lblPaymentDate1;
    private javax.swing.JLabel lblStaffName1;
    private javax.swing.JLabel lblStaffType;
    private javax.swing.JLabel lblTotalMonthsPayable;
    private javax.swing.JLabel lblTotalPaidAmount;
    private javax.swing.JLabel lblTotalPayableAmount;
    private javax.swing.JLabel lblTuitionFeesPerMonth;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JPopupMenu mnuCustomer;
    private javax.swing.JScrollPane panFees;
    private javax.swing.JPanel panPay;
    private javax.swing.JPanel pnlPayments;
    private javax.swing.JTable tblFees;
    private javax.swing.JTextArea txtComments;
    private javax.swing.JTextField txtDateOfAdmission;
    private javax.swing.JTextField txtFeesAmount;
    private javax.swing.JTextField txtGuardian;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtReceiptNumber;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
            if (menu == mitDelete) {
                //int rowIndex = tblPricingTier.getSelectedRow();
                System.out.println("--------INSIDE DELETE-"+tblFees.getModel().getValueAt(tblFees.getSelectedRow(),0));
                if(JOptionPane.showConfirmDialog(this, "Do you really want to delete the selected fees data?", "Confirm", JOptionPane.YES_NO_OPTION)==0){
                    String customerId = tblFees.getModel().getValueAt(tblFees.getSelectedRow(),tblFees.getColumnCount()-1).toString();
                    long id = Long.parseLong(customerId);
                    FeesDAO feesDAO = new FeesDAO();
                    feesDAO.deleteRecordById(id);
                    GenericUtils.removeRowFromJTable(tblFees, feessModel);
                }
                performTableRefresh();
                performStudentSelectionAction();

            }
            if (menu == mitEdit) {
                syncDataFromViewToTable();
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }
}
