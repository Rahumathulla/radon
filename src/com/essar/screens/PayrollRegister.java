/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.AttDAO;
import com.essar.dao.ClassMasterDAO;
import com.essar.dao.PaymentDAO;
import com.essar.dao.StaffDAO;
import com.essar.dao.StudentDAO;
import com.essar.dao.WorkLogDAO;
import com.essar.pojos.Attendance;
import com.essar.pojos.AttDetails;
import com.essar.pojos.ClassMaster;
import com.essar.pojos.Payment;
import com.essar.pojos.Staff;
import com.essar.pojos.Student;
import com.essar.pojos.WorkLogDetails;
import com.essar.utils.TableMouseListener;
import com.essar.utils.GenericUtils;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author rahumathulla
 */
public class PayrollRegister extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form ProductCategory
     */
    long staffId=0;
    long attendanceId = 0;
    long worklogId = 0;
    long paymentId = 0;
    double dTotalHours=0;
    double dPayableAmount=0;
    double dPaidMount=0;
    DefaultTableModel paymentsModel = null;
    DefaultTableModel worklogModel = null;
    Staff gStaffObj;
    public PayrollRegister() {
        initComponents();
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        mnuCustomer = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        btnCancel = new javax.swing.JButton();
        pnlPayments = new javax.swing.JPanel();
        panPayment = new javax.swing.JScrollPane();
        tblPayments = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblBalanceOS = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTotalPaidAmount = new javax.swing.JLabel();
        pnlAttendance2 = new javax.swing.JPanel();
        spnWorkLog = new javax.swing.JScrollPane();
        tblWorkLog = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblTotalHoursWorked = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblTotalPayableAmount = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbStaffName = new javax.swing.JComboBox();
        lblStaffName1 = new javax.swing.JLabel();
        lblHSNCode = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        lblStaffType = new javax.swing.JLabel();
        txtStaffType = new javax.swing.JTextField();
        lblJoiningDate = new javax.swing.JLabel();
        txtJoiningDate = new javax.swing.JTextField();
        panPay = new javax.swing.JPanel();
        lblPaymentDate1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtComments = new javax.swing.JTextArea();
        lblPaymentDate = new javax.swing.JLabel();
        lblPaymentAmount = new javax.swing.JLabel();
        txtPaymentAmount = new javax.swing.JTextField();
        dtpPaymentDate = new com.toedter.calendar.JDateChooser();
        btnMakePayment = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        mitDelete.setText("jMenuItem1");

        mitEdit.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Payroll Register");
        setExtendedState(6);
        setName("frmProductCategory"); // NOI18N

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        panPayment.setBackground(new java.awt.Color(0, 102, 102));
        panPayment.setForeground(new java.awt.Color(0, 153, 153));

        tblPayments.setForeground(new java.awt.Color(0, 102, 102));
        tblPayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sl No", "Payment Date", "Amount", "Payment Note", "StaffId", "PaymentId"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        panPayment.setViewportView(tblPayments);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 153));
        jLabel7.setText("PAYMENTS");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Balance O/S");

        lblBalanceOS.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblBalanceOS.setForeground(new java.awt.Color(204, 102, 0));
        lblBalanceOS.setText("0.0");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Total Amount Paid :");

        lblTotalPaidAmount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalPaidAmount.setForeground(new java.awt.Color(102, 102, 255));
        lblTotalPaidAmount.setText("0.0");

        javax.swing.GroupLayout pnlPaymentsLayout = new javax.swing.GroupLayout(pnlPayments);
        pnlPayments.setLayout(pnlPaymentsLayout);
        pnlPaymentsLayout.setHorizontalGroup(
            pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPaymentsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(298, 298, 298))
            .addGroup(pnlPaymentsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlPaymentsLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalPaidAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(lblBalanceOS, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        pnlPaymentsLayout.setVerticalGroup(
            pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPaymentsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(lblTotalPaidAmount))
                    .addGroup(pnlPaymentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(lblBalanceOS)))
                .addGap(9, 9, 9)
                .addComponent(panPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spnWorkLog.setForeground(new java.awt.Color(0, 102, 204));
        spnWorkLog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        spnWorkLog.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spnWorkLogKeyPressed(evt);
            }
        });

        tblWorkLog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sl No", "Date", "Hours Worked", "Rate/Hour", "Net Amount", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblWorkLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblWorkLogMouseClicked(evt);
            }
        });
        tblWorkLog.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblWorkLogKeyPressed(evt);
            }
        });
        spnWorkLog.setViewportView(tblWorkLog);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Total Hours Worked :");

        lblTotalHoursWorked.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalHoursWorked.setForeground(new java.awt.Color(0, 153, 204));
        lblTotalHoursWorked.setText("0.0");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Total Payable Amount :");

        lblTotalPayableAmount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalPayableAmount.setForeground(new java.awt.Color(0, 153, 102));
        lblTotalPayableAmount.setText("0.0");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 255));
        jLabel5.setText("WORK LOG");

        javax.swing.GroupLayout pnlAttendance2Layout = new javax.swing.GroupLayout(pnlAttendance2);
        pnlAttendance2.setLayout(pnlAttendance2Layout);
        pnlAttendance2Layout.setHorizontalGroup(
            pnlAttendance2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAttendance2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(9, 9, 9)
                .addComponent(lblTotalHoursWorked, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTotalPayableAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(549, 549, 549))
            .addGroup(pnlAttendance2Layout.createSequentialGroup()
                .addGap(243, 243, 243)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlAttendance2Layout.createSequentialGroup()
                .addComponent(spnWorkLog, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlAttendance2Layout.setVerticalGroup(
            pnlAttendance2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAttendance2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAttendance2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblTotalHoursWorked)
                    .addComponent(jLabel2)
                    .addComponent(lblTotalPayableAmount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spnWorkLog, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cmbStaffName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStaffNameActionPerformed(evt);
            }
        });
        cmbStaffName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbStaffNameKeyPressed(evt);
            }
        });

        lblStaffName1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblStaffName1.setText("Staff Name");

        lblHSNCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblHSNCode.setText("Phone Number");

        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPhone.setForeground(new java.awt.Color(0, 153, 153));

        lblStaffType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblStaffType.setText("Staff Type");

        txtStaffType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtStaffType.setForeground(new java.awt.Color(0, 153, 153));

        lblJoiningDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblJoiningDate.setText("Joining Date");

        txtJoiningDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtJoiningDate.setForeground(new java.awt.Color(0, 153, 153));

        lblPaymentDate1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPaymentDate1.setText("Payment Notes");

        txtComments.setColumns(10);
        txtComments.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txtComments.setRows(3);
        txtComments.setTabSize(3);
        jScrollPane4.setViewportView(txtComments);

        lblPaymentDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPaymentDate.setText("Date");

        lblPaymentAmount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPaymentAmount.setText("Payment Amount");

        txtPaymentAmount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPaymentAmount.setForeground(new java.awt.Color(0, 153, 153));

        dtpPaymentDate.setDateFormatString("dd/MM/yyyy");

        btnMakePayment.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnMakePayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sales.png"))); // NOI18N
        btnMakePayment.setMnemonic('P');
        btnMakePayment.setText("Make Payment");
        btnMakePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakePaymentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panPayLayout = new javax.swing.GroupLayout(panPay);
        panPay.setLayout(panPayLayout);
        panPayLayout.setHorizontalGroup(
            panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panPayLayout.createSequentialGroup()
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblPaymentAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblPaymentDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMakePayment)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtpPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        panPayLayout.setVerticalGroup(
            panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panPayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPaymentAmount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPaymentDate)
                    .addComponent(dtpPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panPayLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lblPaymentDate1))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnMakePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHSNCode, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStaffName1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStaffType, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblJoiningDate, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbStaffName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPhone)
                            .addComponent(txtStaffType, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtJoiningDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(pnlAttendance2, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(pnlPayments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(panPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(840, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCancel)
                .addGap(935, 935, 935))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStaffName1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHSNCode))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtStaffType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStaffType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblJoiningDate)
                            .addComponent(txtJoiningDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlPayments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlAttendance2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addGap(0, 3, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void tblWorkLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblWorkLogMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_tblWorkLogMouseClicked

    private void tblWorkLogKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblWorkLogKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_HOME && tblWorkLog.getRowCount()>0){
            /*mitDelete = new JMenuItem("Delete");
            mitDelete.addActionListener(this);
            mnuPurchaseActions.add(mitDelete);*/

            mitEdit = new JMenuItem("Edit");
            mitEdit.addActionListener(this);
            //mnuPurchaseActions.add(mitEdit);

        }
    }//GEN-LAST:event_tblWorkLogKeyPressed

    private void spnWorkLogKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnWorkLogKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_spnWorkLogKeyPressed

    private void cmbStaffNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStaffNameActionPerformed
        // TODO add your handling code here:
        performTableRefresh();
        
        //btnMakePayment.setText("Make Payment");
        //btnMakePayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sales.png")));
    }//GEN-LAST:event_cmbStaffNameActionPerformed

    private void cmbStaffNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbStaffNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStaffNameKeyPressed

    private void btnMakePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakePaymentActionPerformed
        // TODO add your handling code here:
        if(btnMakePayment.getText().equalsIgnoreCase("save")){
            if(validatePaymentForm()){
                PaymentDAO paymentDAO = new PaymentDAO();
                Payment payment = new Payment();
                payment.setStaffId(gStaffObj.getStaffId());
                payment.setAmount(Double.parseDouble(txtPaymentAmount.getText()));
                payment.setDescription(txtComments.getText());
                payment.setPaymentDate(dtpPaymentDate.getDate());
                paymentDAO.insertIntoDB(payment);
                //fetchPaymentData();
                performTableRefresh();
                enablePaymentElements(false);
            }
        }else{
            enablePaymentElements(true);
        }

        
    }//GEN-LAST:event_btnMakePaymentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PayrollRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PayrollRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PayrollRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayrollRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PayrollRegister().setVisible(true);
            }
        });
    }
    
    public void initializeForm(){
        DefaultTableModel model = (DefaultTableModel) tblPayments.getModel();        
        model.setRowCount(0);
        DefaultTableModel workLogModel = (DefaultTableModel) tblWorkLog.getModel();        
        workLogModel.setRowCount(0);
        //panPay.setEnabled(false);
        txtPhone.setEditable(false);
        txtJoiningDate.setEditable(false);
        txtStaffType.setEditable(false);
        
        //btnSave.setText("New");
        //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        //btnSave.requestFocus();
        
        //txtStaffName.setText("");
        //txtStaffPhone.setText("");
        //txtAddress.setText("");
     
        //tblProductCategory.re();
        //tblCategory.remove(panPricingTier);
        enableFormElements(false);
        //StaffDAO staffDAO = new StaffDAO();
        //renderDataIntoTable(staffDAO.retrieveAll());
        
        ClassMasterDAO classMasterDAO = new ClassMasterDAO();
        renderClassDataIntoDropDown(classMasterDAO.retrieveAll());
        
        StaffDAO staffDAO = new StaffDAO();
        renderStaffDataIntoDropDown(staffDAO.retrieveAll());

        mnuCustomer = new JPopupMenu();
        
        mitEdit = new JMenuItem("Edit");
        mitEdit.addActionListener(this);
        
        mitDelete = new JMenuItem("Delete");
        mitDelete.addActionListener(this);
        
        mnuCustomer.add(mitEdit);
        mnuCustomer.add(mitDelete);
         // sets the popup menu for the table
        tblPayments.setComponentPopupMenu(mnuCustomer);      
        tblPayments.addMouseListener(new TableMouseListener(tblPayments));
        
        TableColumn slNumberColumn = tblWorkLog.getColumnModel().getColumn(0);
        slNumberColumn.setPreferredWidth(60);
        slNumberColumn.setMinWidth(60);
        slNumberColumn.setMaxWidth(60);
        
        TableColumn dateColumn = tblWorkLog.getColumnModel().getColumn(1);
        dateColumn.setPreferredWidth(100);
        dateColumn.setMinWidth(100);
        dateColumn.setMaxWidth(100);
        
        TableColumn hrColumn = tblWorkLog.getColumnModel().getColumn(2);
        hrColumn.setPreferredWidth(140);
        hrColumn.setMinWidth(140);
        hrColumn.setMaxWidth(140);
        
        TableColumn rateColumn = tblWorkLog.getColumnModel().getColumn(3);
        rateColumn.setPreferredWidth(100);
        rateColumn.setMinWidth(100);
        rateColumn.setMaxWidth(100);
        
        TableColumn netAmtColumn = tblWorkLog.getColumnModel().getColumn(4);
        netAmtColumn.setPreferredWidth(140);
        netAmtColumn.setMinWidth(140);
        netAmtColumn.setMaxWidth(140);
        

        
        TableColumn idColumn1 = tblPayments.getColumnModel().getColumn(tblPayments.getColumnCount()-1);
        idColumn1.setPreferredWidth(0);
        idColumn1.setMinWidth(0);
        idColumn1.setMaxWidth(0);
        
        TableColumn studentIdColumn = tblPayments.getColumnModel().getColumn(tblPayments.getColumnCount()-2);
        studentIdColumn.setPreferredWidth(0);
        studentIdColumn.setMinWidth(0);
        studentIdColumn.setMaxWidth(0);       

        
        TableColumn slNo = tblPayments.getColumnModel().getColumn(0);
        slNo.setPreferredWidth(90);
        slNo.setMinWidth(90);
        slNo.setMaxWidth(90);
        
        TableColumn dateCol = tblPayments.getColumnModel().getColumn(1);
        dateCol.setPreferredWidth(160);
        dateCol.setMinWidth(160);
        dateCol.setMaxWidth(160);
//        
//        TableColumn classIdColumn = tblPayments.getColumnModel().getColumn(tblPayments.getColumnCount()-4);
//        classIdColumn.setPreferredWidth(0);
//        classIdColumn.setMinWidth(0);
//        classIdColumn.setMaxWidth(0);
        
//        TableColumn attColumn = tblPayments.getColumnModel().getColumn(5);
//        attColumn.setPreferredWidth(90);
//        attColumn.setMinWidth(90);
//        attColumn.setMaxWidth(90);
        
        TableColumn phoneNumberColumn = tblPayments.getColumnModel().getColumn(1);
        phoneNumberColumn.setPreferredWidth(60);
        phoneNumberColumn.setMinWidth(60);
        
        
        TableColumn workLogDetIdColumn = tblWorkLog.getColumnModel().getColumn(tblWorkLog.getColumnCount()-1);
        workLogDetIdColumn.setPreferredWidth(0);
        workLogDetIdColumn.setMinWidth(0);
        workLogDetIdColumn.setMaxWidth(0);
        
        TableColumn workLogIdColumn = tblWorkLog.getColumnModel().getColumn(tblWorkLog.getColumnCount()-2);
        workLogIdColumn.setPreferredWidth(0);
        workLogIdColumn.setMinWidth(0);
        workLogIdColumn.setMaxWidth(0); 

        staffId =0;
   
    }
    
    public void performTableRefresh(){
        dTotalHours=0;
        dPayableAmount=0;
        dPaidMount=0;
        fetchWorklogData();
        fetchPaymentData();
        lblTotalHoursWorked.setText(dTotalHours+"");
        lblTotalPayableAmount.setText(dPayableAmount+"");
        lblTotalPaidAmount.setText(dPaidMount+"");
        lblBalanceOS.setText(dPayableAmount-dPaidMount+"");
    }
    
    public void enableFormElements(boolean flag){
        //txtStaffName.setEnabled(flag);
        //dtpDate.setEnabled(flag);
        //cmbClass.setEnabled(flag);
        //cmbStaffName.setEnabled(flag);
        //cmbStaff.setEnabled(flag);
        /*if(!flag){
            btnSave.setText("New");
            btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        }*/
    }
    public void enablePaymentElements(boolean flag){
        txtComments.setEnabled(flag);
        dtpPaymentDate.setEnabled(flag);
        txtPaymentAmount.setEnabled(flag);
        if(flag){
            btnMakePayment.setText("Save");
            btnMakePayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
            txtPaymentAmount.requestFocus();
            if(null==dtpPaymentDate.getDate()){
                dtpPaymentDate.setDate(new Date());
            }
            txtPaymentAmount.setText("");
            txtComments.setText("");
        }else{
            btnMakePayment.setText("Make Payment");
            btnMakePayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sales.png")));
        }

    }
    public boolean validatePaymentForm(){
        //btnSave.setText("Add");
        //btnSave.requestFocus();
        if(null == txtPaymentAmount.getText() || !(txtPaymentAmount.getText().matches("^\\d*\\.\\d+|\\d+|\\d+\\.\\d*$"))){
            JOptionPane.showMessageDialog(null, "Amount "+txtPaymentAmount.getText() +" is not valid.");
            txtPaymentAmount.requestFocus();
            return false;
        }
        if(null == gStaffObj || gStaffObj.getStaffId()<0 ){
            JOptionPane.showMessageDialog(null, "Please select staff name.");
            return false;
        }
        
        //txtProductCategoryName.setText("");
        return true;
    }
    
   
    
    public void renderClassDataIntoDropDown(List<ClassMaster> classMasterList){
        ClassMaster classMaster = null;
        /*cmbClass.removeAllItems();
        if(classMasterList!= null){
            for(int i=0; i<classMasterList.size();i++){
                cmbClass.addItem(classMasterList.get(i));
            }
            cmbClass.setSelectedIndex(0);
            //incomeExpense = (IncomeExpense)cmbParticularName.getSelectedItem();            
        }*/
    }
    
    public void renderStaffDataIntoDropDown(List<Staff> staffList){
        //Staff staff = null;
        cmbStaffName.removeAllItems();
        if(staffList!= null){
            for(int i=0; i<staffList.size();i++){
                cmbStaffName.addItem(staffList.get(i));
            }
            cmbStaffName.setSelectedIndex(0);
            //incomeExpense = (IncomeExpense)cmbParticularName.getSelectedItem();            
        }
    }
    
    public void renderDataIntoTable(List<Student> studentList){
        
        paymentsModel = (DefaultTableModel) tblPayments.getModel();
        //!@--17/03/2020 Setting id column width to 0;
        /*TableColumn idColumn1 = tblPayments.getColumnModel().getColumn(tblPayments.getColumnCount()-1);
        idColumn1.setPreferredWidth(90);
        idColumn1.setMinWidth(90);
        idColumn1.setMaxWidth(90);
        
        TableColumn slNumberColumn = tblPayments.getColumnModel().getColumn(0);
        slNumberColumn.setPreferredWidth(60);
        slNumberColumn.setMinWidth(60);
        slNumberColumn.setMaxWidth(60);*/

        for(int i=0;i<studentList.size();i++){
            paymentsModel.addRow(new Object[]{paymentsModel.getRowCount()+1, studentList.get(i).getStudentName(),studentList.get(i).getGender(),studentList.get(i).getGuardian(), studentList.get(i).getContactNumber(), Boolean.TRUE,studentList.get(i).getClassId(), studentList.get(i).getStudentId()});
            /*if(studentList.get(i).getQuantity()>0){
                dStockValue += studentList.get(i).getPurchasePrice()*stockList.get(i).getQuantity();
                dSalesValue += studentList.get(i).getSellingPrice()*stockList.get(i).getQuantity();
            }else{
                iSkipped++;
            }*/
            
        }

        TableColumn nameColumn = tblPayments.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        tblPayments.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events              
                    syncDataFromViewToTable();
                }
            }
        });
        
    }
    
    public void renderWorklogDataIntoTable(List<WorkLogDetails> workLogDetailsList){
        
        worklogModel = (DefaultTableModel) tblWorkLog.getModel();

        for(int i=0;i<workLogDetailsList.size();i++){
            worklogModel.addRow(new Object[]{worklogModel.getRowCount()+1, workLogDetailsList.get(i).getUpdateTS()
                    , workLogDetailsList.get(i).getHoursWorked(),workLogDetailsList.get(i).getRatePerHour(), workLogDetailsList.get(i).getNetAmount()
                    , workLogDetailsList.get(i).getPhoneNumber(),workLogDetailsList.get(i).getStaffId()
                    , workLogDetailsList.get(i).getWorkLogId(), workLogDetailsList.get(i).getWorkLogDetailsId()});
            dTotalHours = dTotalHours + workLogDetailsList.get(i).getHoursWorked();
            dPayableAmount = dPayableAmount + workLogDetailsList.get(i).getNetAmount();
           
        }
        TableColumn nameColumn = tblWorkLog.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        tblWorkLog.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events              
                    syncDataFromViewToTable();
                }
            }
        });
        
    }
    
    public void renderPaymentDataIntoTable(List<Payment> paymentList){
        
        paymentsModel = (DefaultTableModel) tblPayments.getModel();
        for(int i=0;i<paymentList.size();i++){
            paymentsModel.addRow(new Object[]{paymentsModel.getRowCount()+1, paymentList.get(i).getPaymentDate()
                    , paymentList.get(i).getAmount()
                    , paymentList.get(i).getDescription()
                    , paymentList.get(i).getStaffId(), paymentList.get(i).getPaymentId()});
            dPaidMount = dPaidMount + paymentList.get(i).getAmount();
           
        }
        TableColumn nameColumn = tblPayments.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        tblPayments.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events              
                    syncDataFromViewToTable();
                }
            }
        });
        
    }
    
    public void fetchAttendanceStatus(){
        /*Date attendanceDate=null;
        if(null==dtpDate.getDate())
            dtpDate.setDate(currDate);
        try {
            attendanceDate = new SimpleDateFormat("yyyy-MM-dd").parse(currDate.getTime());
        } catch (ParseException ex) {
            Logger.getLogger(ComplaintRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(attendanceDate.compareTo(currDate)<0){
            JOptionPane.showMessageDialog(this, "You cannot mark attendance of a future date.!");
        }else{*/
        tblPayments.removeAll();
        tblPayments.repaint();
        paymentsModel=(DefaultTableModel)tblPayments.getModel();
        paymentsModel.setRowCount(0);
            try{
                SimpleDateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat indianFormat = new SimpleDateFormat ("dd/MM/yyyy");
                String attDate="";
                String query = "";
                staffId = 0;
                //((ClassMaster)(cmbClass.getSelectedItem())).getClassMasterId();
                //System.out.println("-----CLASS ID :: "+staffId);
                //====06/18 : Brought here from New button action
                query = "SELECT * from student where class_id="+staffId;
                StudentDAO studentDAO = new StudentDAO();
                renderDataIntoTable(studentDAO.retrieveByQuery(query));
                attendanceId = 0;


                //#######
            }catch(Exception e){
                System.out.println("-- "+e.getMessage());
            }
        //}
    }
    
    public void fetchWorklogData(){
        
        tblWorkLog.removeAll();
        tblWorkLog.repaint();
        tblPayments.removeAll();
        tblPayments.repaint();
        worklogModel=(DefaultTableModel)tblWorkLog.getModel();
        worklogModel.setRowCount(0);
        //Staff staff=null;
        gStaffObj = null;
            try{
                SimpleDateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat indianFormat = new SimpleDateFormat ("dd/MM/yyyy");
                //String attDate="";
                String query = "";
                //StaffDAO staffDAO = new StaffDAO();
                gStaffObj  = ((Staff)(cmbStaffName.getSelectedItem()));      
                staffId = gStaffObj.getStaffId();
                txtStaffType.setText(gStaffObj.getStaffType());
                txtPhone.setText(gStaffObj.getPhoneNumber());
                txtJoiningDate.setText(gStaffObj.getJoiningDate().toString());
                
                //System.out.println("-----CLASS ID :: "+staffId);
                //====06/18 : Brought here from New button action
                query = "SELECT wd.*, w.work_date from work_log_details wd"
                        + " JOIN work_log w ON wd.work_log_id = w.work_log_id WHERE  wd.staff_id="+staffId+" ORDER BY w.work_date DESC";
                System.out.println("QUERY : "+query);
                WorkLogDAO workLogDAO = new WorkLogDAO();
                List<WorkLogDetails> workLogDetailList = workLogDAO.retrieveStaffWorkLogsByQuery(query);
                if(!workLogDetailList.isEmpty()){
                    System.out.println("Work Log Details Count :: "+workLogDetailList.size());
                    //attendanceId = attendance.getAttendanceId();
                    renderWorklogDataIntoTable(workLogDetailList);
                }
                //#######
            }catch(Exception e){
                System.out.println("-- "+e.getMessage());
            }
        //}
    }
    
    public void fetchPaymentData(){
        
        tblPayments.removeAll();
        tblPayments.repaint();
        paymentsModel=(DefaultTableModel)tblPayments.getModel();
        paymentsModel.setRowCount(0);
        //Staff staff=null;
            try{
                SimpleDateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat indianFormat = new SimpleDateFormat ("dd/MM/yyyy");
                String attDate="";
                String query = "";
                StaffDAO staffDAO = new StaffDAO();
                gStaffObj  = ((Staff)(cmbStaffName.getSelectedItem()));      
                staffId = gStaffObj.getStaffId();
                txtStaffType.setText(gStaffObj.getStaffType());
                txtPhone.setText(gStaffObj.getPhoneNumber());
                txtJoiningDate.setText(gStaffObj.getJoiningDate().toString());
                
                //System.out.println("-----CLASS ID :: "+staffId);
                //====06/18 : Brought here from New button action
                query = "SELECT * FROM payment WHERE  staff_id="+staffId+" ORDER BY payment_date DESC";
                System.out.println("QUERY : "+query);
                PaymentDAO paymentDAO = new PaymentDAO();
                List<Payment> paymentList = paymentDAO.retrieveByQuery(query);
                if(!paymentList.isEmpty()){
                    System.out.println("Payment Details Count :: "+paymentList.size());
                    //attendanceId = attendance.getAttendanceId();
                    renderPaymentDataIntoTable(paymentList);
                }
                //#######
            }catch(Exception e){
                System.out.println("-- "+e.getMessage());
            }
        //}
    }
    public void saveAttendanceForm(){
 
        Attendance attendance = new Attendance();
        //attendance.setAttendanceDate(dtpDate.getDate());
        //attendance.setTakenBy(txtStaffName.getText());
        //attendance.setClassId(((ClassMaster) cmbClass.getSelectedItem()).getClassMasterId());
        AttDetails attendanceDetails;
        System.out.println("Save Logic :: ");
        List<AttDetails> attendanceDetailsList = new ArrayList<>();
        for (int i=0; i<tblPayments.getRowCount();i++){
            attendanceDetails = new AttDetails();
            //attendanceDetails.setStudentId(Long.parseLong(tblPayments.getValueAt(i, 7).toString()));
            attendanceDetails.setStudentName(tblPayments.getValueAt(i, 1).toString());
            attendanceDetails.setGender(tblPayments.getValueAt(i, 2).toString());
            attendanceDetails.setGuardian(tblPayments.getValueAt(i, 3).toString());
            attendanceDetails.setPhoneNumber(tblPayments.getValueAt(i, 4).toString());
            attendanceDetails.setClassId(Long.parseLong(tblPayments.getValueAt(i, 6).toString()));
            attendanceDetails.setStudentId(Long.parseLong(tblPayments.getValueAt(i, 7).toString()));
            System.out.println("======"+attendanceDetails.getStudentId());
            if((Boolean)tblPayments.getValueAt(i, 5)==true)
                attendanceDetails.setStatus("P");
            else
                attendanceDetails.setStatus("A");
            attendanceDetailsList.add(attendanceDetails);
        }
        attendance.setAttendanceDetails(attendanceDetailsList);
        AttDAO attendanceDAO = new  AttDAO();
        attendanceDAO.insertIntoDB(attendance, false);
        
        
    }
     /*public void updateAttendanceForm(){
 
       Attendance attendance = new Attendance();
        attendance.setAttendanceDate(dtpDate.getDate());
        attendance.setTakenBy(txtStaffName.getText());
        attendance.setClassId(((ClassMaster) cmbClass.getSelectedItem()).getClassMasterId());
        attendance.setAttendanceId(attendanceId);
        AttDetails attendanceDetails;
        System.out.println("Update Logic :: ");
        List<AttDetails> attendanceDetailsList = new ArrayList<>();
        for (int i=0; i<tblPayments.getRowCount();i++){
            attendanceDetails = new AttDetails();
            //attendanceDetails.setStudentId(Long.parseLong(tblPayments.getValueAt(i, 7).toString()));
            attendanceDetails.setStudentName(tblPayments.getValueAt(i, 1).toString());
            attendanceDetails.setGender(tblPayments.getValueAt(i, 2).toString());
            attendanceDetails.setGuardian(tblPayments.getValueAt(i, 3).toString());
            attendanceDetails.setPhoneNumber(tblPayments.getValueAt(i, 4).toString());
            attendanceDetails.setClassId(Long.parseLong(tblPayments.getValueAt(i, 6).toString()));
            attendanceDetails.setStudentId(Long.parseLong(tblPayments.getValueAt(i, 7).toString()));
            System.out.println("======"+attendanceDetails.getStudentId());
            if((Boolean)tblPayments.getValueAt(i, 5)==true)
                attendanceDetails.setStatus("P");
            else
                attendanceDetails.setStatus("A");
            attendanceDetailsList.add(attendanceDetails);
        }
        attendance.setAttendanceDetails(attendanceDetailsList);
        AttDAO attendanceDAO = new  AttDAO();
        attendanceDAO.updateDB(attendance, false);
        
    }
    */
    
   
    public void syncDataFromViewToTable(){
                //int rowIndex = tblSupplier.getSelectedRow();
        Staff staff = null;
        System.out.println("--------INSIDE Edit-"+tblPayments.getModel().getValueAt(tblPayments.getSelectedRow(),0));
        staffId = Integer.parseInt(tblPayments.getModel().getValueAt(tblPayments.getSelectedRow(),tblPayments.getColumnCount()-1).toString());
        StaffDAO customerDAO = new StaffDAO();
        staff = customerDAO.retrieveById(staffId);
        System.out.println("--"+staff.getStaffName());
        //txtStaffName.setText(staff.getStaffName());
         /*for(int i=0; i<cmbClass.getItemCount();i++){
            if((cmbClass.getSelectedItem().toString()).equalsIgnoreCase(staff.getStaffType())){
                cmbClass.setSelectedItem(cmbClass.getItemAt(i));
            }
        }
        cmbClass.setSelectedItem(staff.getStaffType());*/
        //txtRatePerHour.setText(staff.getRatePerHour()+"");
        //txtStaffPhone.setText(staff.getPhoneNumber()+"");
        //txtAddress.setText(staff.getAddress());
        //dtpDate.setDate(staff.getJoiningDate());
        enableFormElements(true);
        //btnSave.setText("Save");
        //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
        //btnSave.setText("Update");
        //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnMakePayment;
    private javax.swing.JComboBox cmbStaffName;
    private com.toedter.calendar.JDateChooser dtpPaymentDate;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblBalanceOS;
    private javax.swing.JLabel lblHSNCode;
    private javax.swing.JLabel lblJoiningDate;
    private javax.swing.JLabel lblPaymentAmount;
    private javax.swing.JLabel lblPaymentDate;
    private javax.swing.JLabel lblPaymentDate1;
    private javax.swing.JLabel lblStaffName1;
    private javax.swing.JLabel lblStaffType;
    private javax.swing.JLabel lblTotalHoursWorked;
    private javax.swing.JLabel lblTotalPaidAmount;
    private javax.swing.JLabel lblTotalPayableAmount;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JPopupMenu mnuCustomer;
    private javax.swing.JPanel panPay;
    private javax.swing.JScrollPane panPayment;
    private javax.swing.JPanel pnlAttendance2;
    private javax.swing.JPanel pnlPayments;
    private javax.swing.JScrollPane spnWorkLog;
    private javax.swing.JTable tblPayments;
    private javax.swing.JTable tblWorkLog;
    private javax.swing.JTextArea txtComments;
    private javax.swing.JTextField txtJoiningDate;
    private javax.swing.JTextField txtPaymentAmount;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtStaffType;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
            if (menu == mitDelete) {
                //int rowIndex = tblPricingTier.getSelectedRow();
                System.out.println("--------INSIDE DELETE-"+tblPayments.getModel().getValueAt(tblPayments.getSelectedRow(),0));
                if(JOptionPane.showConfirmDialog(this, "Do you really want to delete the selected payment data?", "Confirm", JOptionPane.YES_NO_OPTION)==0){
                    String customerId = tblPayments.getModel().getValueAt(tblPayments.getSelectedRow(),tblPayments.getColumnCount()-1).toString();
                    long id = Long.parseLong(customerId);
                    PaymentDAO paymentDAO = new PaymentDAO();
                    paymentDAO.deleteRecordById(id);
                    GenericUtils.removeRowFromJTable(tblPayments, paymentsModel);
                }

            }
            if (menu == mitEdit) {
                syncDataFromViewToTable();
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }
}
