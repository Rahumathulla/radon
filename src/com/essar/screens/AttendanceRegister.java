/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.AttDAO;
import com.essar.dao.AttendanceDAO;
import com.essar.dao.ClassMasterDAO;
import com.essar.dao.SalesDAO;
import com.essar.dao.StaffDAO;
import com.essar.dao.StudentDAO;
import com.essar.pojos.AttDetails;
import com.essar.pojos.Attendance;
import com.essar.pojos.AttDetails;
import com.essar.pojos.ClassMaster;
import com.essar.pojos.PricingTier;
import com.essar.pojos.Staff;
import com.essar.pojos.Student;
import com.essar.suggestion.SuggestionExampleMain;
import com.essar.utils.TableMouseListener;
import com.essar.utils.GenericUtils;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import jdk.nashorn.internal.ir.BreakNode;

/**
 *
 * @author rahumathulla
 */
public class AttendanceRegister extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form ProductCategory
     */
    long classId=0;
    long attendanceId = 0;
    DefaultTableModel attendanceModel = null;
    public AttendanceRegister() {
        initComponents();
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        mnuCustomer = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        pnlAttendance = new javax.swing.JPanel();
        lblCount = new javax.swing.JLabel();
        panAttendance = new javax.swing.JScrollPane();
        tblAttendance = new javax.swing.JTable();
        lblNotification = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblClass = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblStaffName = new javax.swing.JLabel();
        txtStaffName = new javax.swing.JTextField();
        dtpDate = new com.toedter.calendar.JDateChooser();
        cmbClass = new javax.swing.JComboBox();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        mitDelete.setText("jMenuItem1");

        mitEdit.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Attendance Register");
        setExtendedState(6);
        setName("frmProductCategory"); // NOI18N

        lblCount.setForeground(new java.awt.Color(102, 102, 255));
        lblCount.setText("Count:");

        panAttendance.setBackground(new java.awt.Color(0, 102, 102));
        panAttendance.setForeground(new java.awt.Color(0, 153, 153));

        tblAttendance.setForeground(new java.awt.Color(0, 102, 102));
        tblAttendance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sl No", "Student Name", "Gender", "Guardian", "Phone Number", "Attendance", "classId", "StudentId", "AttendanceId", "AttendanceDetailsId"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAttendance.setRowSorter(null);
        panAttendance.setViewportView(tblAttendance);

        lblNotification.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        lblNotification.setForeground(new java.awt.Color(255, 102, 102));
        lblNotification.setText("Note:");

        javax.swing.GroupLayout pnlAttendanceLayout = new javax.swing.GroupLayout(pnlAttendance);
        pnlAttendance.setLayout(pnlAttendanceLayout);
        pnlAttendanceLayout.setHorizontalGroup(
            pnlAttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAttendanceLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlAttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panAttendance, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE)
                    .addGroup(pnlAttendanceLayout.createSequentialGroup()
                        .addComponent(lblCount, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblNotification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlAttendanceLayout.setVerticalGroup(
            pnlAttendanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAttendanceLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lblCount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNotification, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        lblClass.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblClass.setText("Class");

        lblDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDate.setText("Date of Attendance");

        lblStaffName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblStaffName.setText("Attendance Taken By");

        txtStaffName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        dtpDate.setDateFormatString("dd/MM/yyyy");
        dtpDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dtpDateMouseClicked(evt);
            }
        });
        dtpDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dtpDatePropertyChange(evt);
            }
        });

        cmbClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClassActionPerformed(evt);
            }
        });
        cmbClass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbClassKeyPressed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png"))); // NOI18N
        btnUpdate.setMnemonic('R');
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        btnReset.setMnemonic('R');
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblClass, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(82, 82, 82)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dtpDate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClass, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dtpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnReset))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(921, 921, 921))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(pnlAttendance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(399, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(attendanceId<=0)
            btnUpdate.setEnabled(false);
        if(btnSave.getText().equalsIgnoreCase("new")){
            if(null==dtpDate.getDate()){
                dtpDate.setDate(new Date());
            }
            btnSave.setText("Save");
            btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
            enableFormElements(true);
            SuggestionExampleMain.populateStaffNames(this, txtStaffName);
            txtStaffName.requestFocus();
        }else{
            if(validateForm()){
                /*if(attendanceId>0)
                    updateAttendanceForm();
                else*/
                    saveAttendanceForm();
                initializeForm();

            }   

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cmbClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClassActionPerformed
        // TODO add your handling code here:
        fetchAttendanceStatus();
        
    }//GEN-LAST:event_cmbClassActionPerformed

    private void cmbClassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbClassKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbClassKeyPressed

    private void dtpDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dtpDateMouseClicked
        // TODO add your handling code here:
        
        //fetchAttendanceStatus();
    }//GEN-LAST:event_dtpDateMouseClicked

    private void dtpDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dtpDatePropertyChange
        // TODO add your handling code here:
        fetchAttendanceStatus();
    }//GEN-LAST:event_dtpDatePropertyChange

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if(attendanceId>0)
                    updateAttendanceForm();
        initializeForm();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        tblAttendance.removeAll();
        initializeForm();
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AttendanceRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AttendanceRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AttendanceRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AttendanceRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AttendanceRegister().setVisible(true);
            }
        });
    }
    
    public void initializeForm(){
        DefaultTableModel model = (DefaultTableModel) tblAttendance.getModel();
        tblAttendance.setAutoCreateRowSorter(true);
        model.setRowCount(0);
        btnUpdate.setEnabled(false);
        btnSave.setText("New");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnSave.requestFocus();
        txtStaffName.setText("");
        //txtStaffPhone.setText("");
        //txtAddress.setText("");
     
        //tblProductCategory.re();
        //tblCategory.remove(panPricingTier);
        enableFormElements(false);
        //StaffDAO staffDAO = new StaffDAO();
        //renderDataIntoTable(staffDAO.retrieveAll());
        
        ClassMasterDAO classMasterDAO = new ClassMasterDAO();
        renderClassDataIntoDropDown(classMasterDAO.retrieveAll());

        mnuCustomer = new JPopupMenu();
        
        mitEdit = new JMenuItem("Edit");
        mitEdit.addActionListener(this);
        
        mitDelete = new JMenuItem("Delete");
        mitDelete.addActionListener(this);
        
        mnuCustomer.add(mitEdit);
        mnuCustomer.add(mitDelete);
         // sets the popup menu for the table
        tblAttendance.setComponentPopupMenu(mnuCustomer);      
        tblAttendance.addMouseListener(new TableMouseListener(tblAttendance));
        
        TableColumn slNumberColumn = tblAttendance.getColumnModel().getColumn(0);
        slNumberColumn.setPreferredWidth(60);
        slNumberColumn.setMinWidth(60);
        slNumberColumn.setMaxWidth(60);
        
        TableColumn idColumn1 = tblAttendance.getColumnModel().getColumn(tblAttendance.getColumnCount()-1);
        idColumn1.setPreferredWidth(0);
        idColumn1.setMinWidth(0);
        idColumn1.setMaxWidth(0);
        
        TableColumn studentIdColumn = tblAttendance.getColumnModel().getColumn(tblAttendance.getColumnCount()-2);
        studentIdColumn.setPreferredWidth(0);
        studentIdColumn.setMinWidth(0);
        studentIdColumn.setMaxWidth(0);       

        
        TableColumn stdIdColumn = tblAttendance.getColumnModel().getColumn(tblAttendance.getColumnCount()-3);
        stdIdColumn.setPreferredWidth(0);
        stdIdColumn.setMinWidth(0);
        stdIdColumn.setMaxWidth(0);
        
        TableColumn classIdColumn = tblAttendance.getColumnModel().getColumn(tblAttendance.getColumnCount()-4);
        classIdColumn.setPreferredWidth(0);
        classIdColumn.setMinWidth(0);
        classIdColumn.setMaxWidth(0);
        
        TableColumn attColumn = tblAttendance.getColumnModel().getColumn(5);
        attColumn.setPreferredWidth(90);
        attColumn.setMinWidth(90);
        attColumn.setMaxWidth(90);
        
        TableColumn phoneNumberColumn = tblAttendance.getColumnModel().getColumn(1);
        phoneNumberColumn.setPreferredWidth(60);
        phoneNumberColumn.setMinWidth(60);

        classId =0;
   
    }
    
    public void enableFormElements(boolean flag){
        txtStaffName.setEnabled(flag);
        dtpDate.setEnabled(flag);
        cmbClass.setEnabled(flag);
        //cmbStaff.setEnabled(flag);
        if(!flag){
            btnSave.setText("New");
            btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        }
    }
    public boolean validateForm(){
        //btnSave.setText("Add");
        //btnSave.requestFocus();
        if(null == txtStaffName.getText()){
            JOptionPane.showMessageDialog(null, "Staff Name "+txtStaffName.getText() +" is not valid.");
            return false;
        }
        
        //txtProductCategoryName.setText("");
        return true;
    }
    
   
    
    public void renderClassDataIntoDropDown(List<ClassMaster> classMasterList){
        ClassMaster classMaster = null;
        cmbClass.removeAllItems();
        if(classMasterList!= null){
            for(int i=0; i<classMasterList.size();i++){
                cmbClass.addItem(classMasterList.get(i));
            }
            cmbClass.setSelectedIndex(0);
            //incomeExpense = (IncomeExpense)cmbParticularName.getSelectedItem();            
        }
    }
    
    public void renderDataIntoTable(List<Student> studentList){
        
        attendanceModel = (DefaultTableModel) tblAttendance.getModel();
        //!@--17/03/2020 Setting id column width to 0;
        /*TableColumn idColumn1 = tblAttendance.getColumnModel().getColumn(tblAttendance.getColumnCount()-1);
        idColumn1.setPreferredWidth(90);
        idColumn1.setMinWidth(90);
        idColumn1.setMaxWidth(90);
        
        TableColumn slNumberColumn = tblAttendance.getColumnModel().getColumn(0);
        slNumberColumn.setPreferredWidth(60);
        slNumberColumn.setMinWidth(60);
        slNumberColumn.setMaxWidth(60);*/

        for(int i=0;i<studentList.size();i++){
            attendanceModel.addRow(new Object[]{attendanceModel.getRowCount()+1, studentList.get(i).getStudentName(),studentList.get(i).getGender(),studentList.get(i).getGuardian(), studentList.get(i).getContactNumber(), Boolean.TRUE,studentList.get(i).getClassId(), studentList.get(i).getStudentId()});
            /*if(studentList.get(i).getQuantity()>0){
                dStockValue += studentList.get(i).getPurchasePrice()*stockList.get(i).getQuantity();
                dSalesValue += studentList.get(i).getSellingPrice()*stockList.get(i).getQuantity();
            }else{
                iSkipped++;
            }*/
            
        }

        TableColumn nameColumn = tblAttendance.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        tblAttendance.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events              
                    syncDataFromViewToTable();
                }
            }
        });
        
    }
    
    public void renderAttDataIntoTable(List<AttDetails> attDetailsList){
        
        attendanceModel = (DefaultTableModel) tblAttendance.getModel();
        for(int i=0;i<attDetailsList.size();i++){
            attendanceModel.addRow(new Object[]{attendanceModel.getRowCount()+1, attDetailsList.get(i).getStudentName()
                    , attDetailsList.get(i).getGender(),attDetailsList.get(i).getGuardian(), attDetailsList.get(i).getPhoneNumber()
                    , attDetailsList.get(i).getStatus().equalsIgnoreCase("P")?Boolean.TRUE:Boolean.FALSE,attDetailsList.get(i).getClassId(), attDetailsList.get(i).getStudentId()
                    , attDetailsList.get(i).getAttendanceId(), attDetailsList.get(i).getAttendanceDetailsId()});
           
        }

        TableColumn nameColumn = tblAttendance.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        tblAttendance.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events              
                    syncDataFromViewToTable();
                }
            }
        });
        
    }
    
    public void fetchAttendanceStatus(){
        /*Date attendanceDate=null;
        if(null==dtpDate.getDate())
            dtpDate.setDate(currDate);
        try {
            attendanceDate = new SimpleDateFormat("yyyy-MM-dd").parse(currDate.getTime());
        } catch (ParseException ex) {
            Logger.getLogger(ComplaintRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(attendanceDate.compareTo(currDate)<0){
            JOptionPane.showMessageDialog(this, "You cannot mark attendance of a future date.!");
        }else{*/
        tblAttendance.removeAll();
        tblAttendance.repaint();
        attendanceModel=(DefaultTableModel)tblAttendance.getModel();
        attendanceModel.setRowCount(0);
            try{
                SimpleDateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat indianFormat = new SimpleDateFormat ("dd/MM/yyyy");
                String attDate="";
                String query = "";
                classId = ((ClassMaster)(cmbClass.getSelectedItem())).getClassMasterId();
                //System.out.println("-----CLASS ID :: "+classId);
                //====06/18 : Brought here from New button action
                if(null!=dtpDate.getDate()){
                    attDate = dateFormat.format(dtpDate.getDate());
                    query = "SELECT * from attendance where class_id="+classId+ " AND attendance_date='"+attDate+"'";
                    //System.out.println("QUERY : "+query);
                    AttDAO attDAO = new AttDAO();
                    Attendance attendance = attDAO.retrieveByQuery(query);
                    if(attendance!=null){
                        System.out.println("Details Count :: "+attendance.getAttendanceDetails().size());
                        attendanceId = attendance.getAttendanceId();
                        renderAttDataIntoTable(attendance.getAttendanceDetails());
                        //btnSave.setText("Update");
                        //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
                        btnUpdate.setEnabled(true);
                        //btnSave.setEnabled(false);
                        lblNotification.setForeground(Color.red);
                        lblNotification.setText("The attendance for this class is already taken for the date : "+indianFormat.format(dtpDate.getDate())+". You can update the attendance in case needed.");
                        //
                    }
                    else{
                        query = "SELECT * from student where class_id="+classId;
                        StudentDAO studentDAO = new StudentDAO();
                        renderDataIntoTable(studentDAO.retrieveByQuery(query));
                        attendanceId = 0;
                        lblNotification.setForeground(Color.MAGENTA);
                        lblNotification.setText("First time attendance of the day for this particular class.");
                        btnSave.setText("Save");
                        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
                        btnUpdate.setEnabled(false);
                        btnSave.setEnabled(true);
                    }

                }
                else{
                    query = "SELECT * from student where class_id="+classId;
                    StudentDAO studentDAO = new StudentDAO();
                    renderDataIntoTable(studentDAO.retrieveByQuery(query));
                    attendanceId = 0;
                }

                //#######
            }catch(Exception e){
                System.out.println("-- "+e.getMessage());
            }
        //}
    }
    public void saveAttendanceForm(){
 
        Attendance attendance = new Attendance();
        attendance.setAttendanceDate(dtpDate.getDate());
        attendance.setTakenBy(txtStaffName.getText());
        attendance.setClassId(((ClassMaster) cmbClass.getSelectedItem()).getClassMasterId());
        AttDetails attendanceDetails;
        System.out.println("Save Logic :: ");
        List<AttDetails> attendanceDetailsList = new ArrayList<>();
        for (int i=0; i<tblAttendance.getRowCount();i++){
            attendanceDetails = new AttDetails();
            //attendanceDetails.setStudentId(Long.parseLong(tblAttendance.getValueAt(i, 7).toString()));
            attendanceDetails.setStudentName(tblAttendance.getValueAt(i, 1).toString());
            attendanceDetails.setGender(tblAttendance.getValueAt(i, 2).toString());
            attendanceDetails.setGuardian(tblAttendance.getValueAt(i, 3).toString());
            attendanceDetails.setPhoneNumber(tblAttendance.getValueAt(i, 4).toString());
            attendanceDetails.setClassId(Long.parseLong(tblAttendance.getValueAt(i, 6).toString()));
            attendanceDetails.setStudentId(Long.parseLong(tblAttendance.getValueAt(i, 7).toString()));
            System.out.println("======"+attendanceDetails.getStudentId());
            if((Boolean)tblAttendance.getValueAt(i, 5)==true)
                attendanceDetails.setStatus("P");
            else
                attendanceDetails.setStatus("A");
            attendanceDetailsList.add(attendanceDetails);
        }
        attendance.setAttendanceDetails(attendanceDetailsList);
        AttDAO attendanceDAO = new  AttDAO();
        attendanceDAO.insertIntoDB(attendance, false);
        
        
    }
     public void updateAttendanceForm(){
 
       Attendance attendance = new Attendance();
        attendance.setAttendanceDate(dtpDate.getDate());
        attendance.setTakenBy(txtStaffName.getText());
        attendance.setClassId(((ClassMaster) cmbClass.getSelectedItem()).getClassMasterId());
        attendance.setAttendanceId(attendanceId);
        AttDetails attendanceDetails;
        System.out.println("Update Logic :: ");
        List<AttDetails> attendanceDetailsList = new ArrayList<>();
        for (int i=0; i<tblAttendance.getRowCount();i++){
            attendanceDetails = new AttDetails();
            //attendanceDetails.setStudentId(Long.parseLong(tblAttendance.getValueAt(i, 7).toString()));
            attendanceDetails.setStudentName(tblAttendance.getValueAt(i, 1).toString());
            attendanceDetails.setGender(tblAttendance.getValueAt(i, 2).toString());
            attendanceDetails.setGuardian(tblAttendance.getValueAt(i, 3).toString());
            attendanceDetails.setPhoneNumber(tblAttendance.getValueAt(i, 4).toString());
            attendanceDetails.setClassId(Long.parseLong(tblAttendance.getValueAt(i, 6).toString()));
            attendanceDetails.setStudentId(Long.parseLong(tblAttendance.getValueAt(i, 7).toString()));
            System.out.println("======"+attendanceDetails.getStudentId());
            if((Boolean)tblAttendance.getValueAt(i, 5)==true)
                attendanceDetails.setStatus("P");
            else
                attendanceDetails.setStatus("A");
            attendanceDetailsList.add(attendanceDetails);
        }
        attendance.setAttendanceDetails(attendanceDetailsList);
        AttDAO attendanceDAO = new  AttDAO();
        attendanceDAO.updateDB(attendance, false);
        
    }
    
    
   
    public void syncDataFromViewToTable(){
                //int rowIndex = tblSupplier.getSelectedRow();
        Staff staff = null;
        System.out.println("--------INSIDE Edit-"+tblAttendance.getModel().getValueAt(tblAttendance.getSelectedRow(),0));
        classId = Integer.parseInt(tblAttendance.getModel().getValueAt(tblAttendance.getSelectedRow(),tblAttendance.getColumnCount()-1).toString());
        StaffDAO customerDAO = new StaffDAO();
        staff = customerDAO.retrieveById(classId);
        System.out.println("--"+staff.getStaffName());
        txtStaffName.setText(staff.getStaffName());
         for(int i=0; i<cmbClass.getItemCount();i++){
            if((cmbClass.getSelectedItem().toString()).equalsIgnoreCase(staff.getStaffType())){
                cmbClass.setSelectedItem(cmbClass.getItemAt(i));
            }
        }
        cmbClass.setSelectedItem(staff.getStaffType());
        //txtRatePerHour.setText(staff.getRatePerHour()+"");
        //txtStaffPhone.setText(staff.getPhoneNumber()+"");
        //txtAddress.setText(staff.getAddress());
        dtpDate.setDate(staff.getJoiningDate());
        enableFormElements(true);
        //btnSave.setText("Save");
        //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
        //btnSave.setText("Update");
        //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cmbClass;
    private com.toedter.calendar.JDateChooser dtpDate;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblNotification;
    private javax.swing.JLabel lblStaffName;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JPopupMenu mnuCustomer;
    private javax.swing.JScrollPane panAttendance;
    private javax.swing.JPanel pnlAttendance;
    private javax.swing.JTable tblAttendance;
    private javax.swing.JTextField txtStaffName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
            if (menu == mitDelete) {
                //int rowIndex = tblPricingTier.getSelectedRow();
                System.out.println("--------INSIDE DELETE-"+tblAttendance.getModel().getValueAt(tblAttendance.getSelectedRow(),0));
                String customerId = tblAttendance.getModel().getValueAt(tblAttendance.getSelectedRow(),tblAttendance.getColumnCount()-1).toString();
                long id = Long.parseLong(customerId);
                StaffDAO staffDAO = new StaffDAO();
                staffDAO.deleteRecordById(id);
                GenericUtils.removeRowFromJTable(tblAttendance, attendanceModel);
            }
            if (menu == mitEdit) {
                syncDataFromViewToTable();
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }
}
