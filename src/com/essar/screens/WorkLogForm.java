/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.WorkLogDAO;
import com.essar.dao.StaffDAO;
import com.essar.dao.SupplierDAO;
import com.essar.suggestion.SuggestionExampleMain;
import com.essar.utils.TableMouseListener;
import com.essar.pojos.Staff;
import com.essar.pojos.Stock;
import com.essar.pojos.WorkLog;
import com.essar.pojos.WorkLogDetails;
import com.essar.pojos.WorkLogReturn;
import com.essar.utils.ConnectionManager;
import com.essar.utils.GenericUtils;
import com.essar.utils.QueryStrings;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author rahumathulla
 */
public class WorkLogForm extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form ProductCategory
     */
    double gSalesPercentage = 0;
    Stock stock = null;
    Staff staff = null;
    double gBillAmount = 0;
    double gDiscount = 0;
    double gPyableAmount = 0;
    double gBalanceAmount = 0;
    double gTotalGst = 0;
    double gSGst = 0;
    double gCGst = 0;
    double gQuantity = 0;
    double gGst12 = 0;
    double gGst18 = 0;
    double gGst5 = 0;
    double gCess = 0;
    double gStockAvailable = 0;
    //!-- 06/27/2020 Added for navigation
    long minId = 0;
    long maxId = 0;
    long currentId=0;
    long workLogIdEdit=0;
    HashMap map = new HashMap();
    List<WorkLogReturn> returnList = null;
    DecimalFormat df = new DecimalFormat("###.##");
    DefaultTableModel worklogDetailsModel = null;
    public WorkLogForm() {
        initComponents();
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
    }
    
    public WorkLogForm(WorkLog workLog) {
        initComponents();
        this.setBounds(40, 40, 960, 660);
        //initializeForm();
        //fetchPurchaseDataIntoTable(purchase);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        mnuPurchaseActions = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        stockDAO1 = new com.essar.dao.StockDAO();
        grpSalesType = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        mitReturn = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        pnlPurchase = new javax.swing.JPanel();
        lblItemName = new javax.swing.JLabel();
        lblHSNCode = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        txtStaffName = new javax.swing.JTextField();
        spnPurchaseItems = new javax.swing.JScrollPane();
        tblStaffLogging = new javax.swing.JTable();
        lblQuantity = new javax.swing.JLabel();
        txtBillableHourse = new javax.swing.JTextField();
        txtRate = new javax.swing.JTextField();
        lblUnitPrice = new javax.swing.JLabel();
        cmdReset = new javax.swing.JButton();
        txtTotalAmount = new javax.swing.JTextField();
        lblSGst1 = new javax.swing.JLabel();
        lblInvoiceNumber = new javax.swing.JLabel();
        radCash = new javax.swing.JRadioButton();
        radCredit = new javax.swing.JRadioButton();
        lblPaymentType = new javax.swing.JLabel();
        txtInvoiceNumber = new javax.swing.JTextField();
        dtpWorkedDate = new com.toedter.calendar.JDateChooser();
        lblAvailableQty = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnViewAll = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnAddMore = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        mitDelete.setText("jMenuItem1");

        mitReturn.setText("jMenuItem1");

        mitEdit.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Work Log");
        setBounds(new java.awt.Rectangle(20, 20, 500, 500));
        setExtendedState(6);
        setName("frmProductCategory"); // NOI18N
        getContentPane().setLayout(null);

        lblItemName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblItemName.setText("Staff Name");

        lblHSNCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblHSNCode.setText("Phone Number");

        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtStaffName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtStaffName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStaffNameActionPerformed(evt);
            }
        });
        txtStaffName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStaffNameKeyReleased(evt);
            }
        });

        spnPurchaseItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spnPurchaseItemsKeyPressed(evt);
            }
        });

        tblStaffLogging.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff Type", "Staff Name", "Phone Number", "Rate/Hour", "Hours Worked", "Net Amount", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStaffLogging.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStaffLoggingMouseClicked(evt);
            }
        });
        tblStaffLogging.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblStaffLoggingKeyPressed(evt);
            }
        });
        spnPurchaseItems.setViewportView(tblStaffLogging);

        lblQuantity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblQuantity.setText("Billable Hours");

        txtBillableHourse.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtBillableHourse.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtBillableHourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBillableHourseActionPerformed(evt);
            }
        });

        txtRate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRateActionPerformed(evt);
            }
        });
        txtRate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtRatePropertyChange(evt);
            }
        });
        txtRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRateKeyReleased(evt);
            }
        });

        lblUnitPrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblUnitPrice.setText("Rate");

        cmdReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmdReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset_small.png"))); // NOI18N
        cmdReset.setText("Reset");
        cmdReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdResetActionPerformed(evt);
            }
        });

        txtTotalAmount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtTotalAmount.setForeground(new java.awt.Color(0, 153, 153));
        txtTotalAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalAmount.setText("$$");

        lblSGst1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSGst1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblSGst1.setText("Total ");

        lblInvoiceNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblInvoiceNumber.setText("Reference Number:");

        grpSalesType.add(radCash);
        radCash.setText("Cash");
        radCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radCashActionPerformed(evt);
            }
        });

        grpSalesType.add(radCredit);
        radCredit.setText("Credit");

        lblPaymentType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPaymentType.setForeground(new java.awt.Color(0, 204, 51));
        lblPaymentType.setText("Payment Type :");

        txtInvoiceNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtInvoiceNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtInvoiceNumberKeyReleased(evt);
            }
        });

        dtpWorkedDate.setDateFormatString("dd/MM/yyyy");

        lblAvailableQty.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAvailableQty.setForeground(new java.awt.Color(102, 102, 255));
        lblAvailableQty.setText("00");

        lblDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDate.setText("Date:");

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnPrint.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print.png"))); // NOI18N
        btnPrint.setMnemonic('P');
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnSearch.setMnemonic('e');
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnViewAll.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnViewAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/viewall.png"))); // NOI18N
        btnViewAll.setMnemonic('V');
        btnViewAll.setText("View All");
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/next.png"))); // NOI18N
        btnNext.setMnemonic('x');
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/previous.png"))); // NOI18N
        btnPrevious.setMnemonic('r');
        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnAddMore.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAddMore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        btnAddMore.setMnemonic('S');
        btnAddMore.setText("More");
        btnAddMore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMoreActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset.png"))); // NOI18N
        btnReset.setMnemonic('R');
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPurchaseLayout = new javax.swing.GroupLayout(pnlPurchase);
        pnlPurchase.setLayout(pnlPurchaseLayout);
        pnlPurchaseLayout.setHorizontalGroup(
            pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPurchaseLayout.createSequentialGroup()
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addComponent(txtInvoiceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDate)
                                    .addComponent(dtpWorkedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPhone)
                            .addComponent(lblHSNCode, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUnitPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addGap(122, 122, 122)
                                .addComponent(lblPaymentType, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radCash))
                            .addComponent(txtBillableHourse, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addComponent(radCredit)
                                .addGap(28, 28, 28))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblAvailableQty, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmdReset))))
                    .addComponent(spnPurchaseItems)
                    .addComponent(lblInvoiceNumber, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addComponent(lblSGst1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddMore, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                        .addComponent(btnPrevious)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        pnlPurchaseLayout.setVerticalGroup(
            pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPurchaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addComponent(lblInvoiceNumber)
                        .addGap(0, 4, Short.MAX_VALUE)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPaymentType)
                            .addComponent(radCash)
                            .addComponent(radCredit))
                        .addGap(12, 12, 12)
                        .addComponent(lblAvailableQty)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdReset))
                    .addGroup(pnlPurchaseLayout.createSequentialGroup()
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dtpWorkedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtInvoiceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createSequentialGroup()
                                .addComponent(lblQuantity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBillableHourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(pnlPurchaseLayout.createSequentialGroup()
                                    .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblHSNCode)
                                        .addComponent(lblItemName))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlPurchaseLayout.createSequentialGroup()
                                    .addGap(5, 5, 5)
                                    .addComponent(lblUnitPrice)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spnPurchaseItems, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSGst1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPrint, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddMore, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(pnlPurchase);
        pnlPurchase.setBounds(60, 40, 1010, 601);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdResetActionPerformed
        // TODO add your handling code here:
        clearItemFields();
    }//GEN-LAST:event_cmdResetActionPerformed

    private void txtBillableHourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBillableHourseActionPerformed
        // TODO add your handling code here:
        if(validateForm()){
            renderWorkLogDataIntoTable(stock);
            clearItemFields();
            txtStaffName.requestFocus();
        }
    }//GEN-LAST:event_txtBillableHourseActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(btnSave.getText().equalsIgnoreCase("new")){
            /*PricingTierDAO pricingTierDAO = new PricingTierDAO();
            renderDataIntoDropDown(pricingTierDAO.retrieveAll());*/
            WorkLogDAO refNumGenDAO = new WorkLogDAO();
            txtInvoiceNumber.setText(refNumGenDAO.generateReferenceNumber()+"");
            workLogIdEdit = 0;
            SupplierDAO supplierDAO = new SupplierDAO();
            //renderSupplierDataIntoDropDown(supplierDAO.retrieveAll());
            /*SalesDAO billGenDAO =  new SalesDAO();
            txtBillNumber.setText(billGenDAO.generateBillNumber()+"");
            ((DefaultTableModel)tblSalesDetails.getModel()).setNumRows(0); */
            btnSave.setText("Save");
            btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
            enableFormElements(true);
            if(null==dtpWorkedDate.getDate()){
                dtpWorkedDate.setDate(new Date());
            }
            SuggestionExampleMain.populateStaffNames(this, txtStaffName);
            txtStaffName.requestFocus();
        }else if(btnSave.getText().equalsIgnoreCase("save")){
            //Implement Save Logic
            if(validatePurchaseDetails()){
                saveWorkLogForm();
                initializeForm();
            }

        }else if(btnSave.getText().equalsIgnoreCase("update")){

            updateWorkLogForm(returnList);
            initializeForm();
            /*this.dispose();
            SalesWindow salesWindow = new SalesWindow();
            salesWindow.setBounds(100, 60, 960, 590);
            salesWindow.setVisible(true);*/

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtStaffNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStaffNameActionPerformed
        // TODO add your handling code here:
        try{
            populateItemDetails();
        }
        catch(Exception e){
            System.out.println("Error Retrieving the item -"+e.getMessage());
        }
    }//GEN-LAST:event_txtStaffNameActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
            ConnectionManager cm = new ConnectionManager();
            Connection con = cm.getConnection();            
            //String reportString="C:\\Users\\rahumathulla\\Documents\\NetBeansProjects\\shopaid\\src\\com\\essar\\reports\\sales_print_1.jrxml";
            //String reportString="C:\\Users\\rahumathulla\\AppData\\Local\\shopaid\\src\\com\\essar\\reports\\sales_print.jrxml";
            //String reportString="src\\com\\essar\\reports\\sales_print.jrxml";
            String reportString="src\\com\\essar\\reports\\purchase_print.jrxml";
            JasperReport jr = null;
            HashMap map = new HashMap();
            map.put("bill_no",Integer.parseInt(txtInvoiceNumber.getText())); 
        try {
            jr = JasperCompileManager.compileReport(reportString);
        } catch (JRException ex) {
            Logger.getLogger(WorkLogForm.class.getName()).log(Level.SEVERE, null, ex);
        }
            JasperPrint jp = null;
        try {
            jp = JasperFillManager.fillReport(jr, map,con);
            //JasperViewer jv = new JasperViewer( jp, false );
            //jv.viewReport( jp, false );             
            //JasperViewer.viewReport(jp, false);
            //jv.setDefaultCloseOperation(JasperViewer.DISPOSE_ON_CLOSE);
            //jv.setTitle("Sales Bill");
            con.close();
        } catch (JRException ex) {
            Logger.getLogger(StudentRegister.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(WorkLogForm.class.getName()).log(Level.SEVERE, null, ex);
        }
            //JasperViewer.viewReport(jp);
        JasperViewer jv = new JasperViewer(jp, false);
        jv.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt){
                //JOptionPane.showMessageDialog(new javax.swing.JFrame(), "Closed","Why?", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Jasper Window has been closed");
            }
        });
        jv.setVisible(true);
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        /*try{
            String billNumber = JOptionPane.showInputDialog(this, " Please enter the invoice/bill number.");
            System.out.println("Bill Number = "+billNumber);
            if(null == billNumber || "".equalsIgnoreCase(billNumber.trim())){
                JOptionPane.showMessageDialog(this, "No Data found!");
            }else{
                PurchaseDAO purchaseDAO = new PurchaseDAO();
                fetchPurchaseDataIntoTable(purchaseDAO.retrieveByRefNumber(billNumber));
            }
        }catch(Exception e){
            System.out.println("Invalid Bill Number");
        }*/
        PurchaseFind purchaseFind =  new PurchaseFind();
        purchaseFind.setBounds(60, 60, 630, 360);
        purchaseFind.setVisible(true);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        // TODO add your handling code here:
        this.dispose();
        QueryStrings.viewPurchaseSql =  "SELECT w.work_log_id"
            + ", w.reference_number"
            + ", w.work_date"
            + ", w.create_ts"
            + ", w.update_ts"
            + ", w.total_amount"
            + ", w.status"
            + " from work_log w "; 
        ViewWorkLog purchaseView =  new ViewWorkLog();
        //purchaseView.setSize(800, 520);
        purchaseView.setVisible(true);
    }//GEN-LAST:event_btnViewAllActionPerformed

    private void radCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radCashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radCashActionPerformed

    private void txtRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRateActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtRateActionPerformed

    private void txtStaffNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffNameKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            System.out.println("---inside item name change");
            try{
                populateItemDetails();
            }
            catch(Exception e){
                System.out.println("Error Retireving the item -"+e.getMessage());
            }
        }
    }//GEN-LAST:event_txtStaffNameKeyReleased

    private void txtRateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRateKeyReleased
         // TODO add your handling code here:
        /* try{
            if(txtPurchasePrice.isVisible()){
                    //calculateSuggestions();
                    double itemRate = Double.parseDouble(txtRate.getText());
                    double pricePostGst = itemRate+(stock.getGstPercentage()* itemRate/100);
                    txtPurchasePrice.setText(df.format(pricePostGst));
                    
                    double gstValue = itemRate * stock.getGstPercentage() / 100;
                    txtGstAmount.setText(df.format(gstValue));
                }
            }catch(Exception e){
                
            }*/
    }//GEN-LAST:event_txtRateKeyReleased

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        try{
            
            if(currentId-1 >= minId){
                currentId = currentId -1;
                WorkLogDAO workLogDAO = new WorkLogDAO();
                fetchWorkLogDataIntoTable(workLogDAO.retrieveByWorkLogId(currentId));
            }else{
                JOptionPane.showMessageDialog(null, "No more record before.");
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Reached at the beginning.");
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        try{
            
            if(currentId+1 <= maxId){
                currentId = currentId +1;
                WorkLogDAO workLogDAO = new WorkLogDAO();
                fetchWorkLogDataIntoTable(workLogDAO.retrieveByWorkLogId(currentId));
            }else{
                JOptionPane.showMessageDialog(null, "No more record after.");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Reached at the end.");
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        initializeForm();
    }//GEN-LAST:event_btnResetActionPerformed

    private void spnPurchaseItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spnPurchaseItemsKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_spnPurchaseItemsKeyPressed

    private void tblStaffLoggingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblStaffLoggingKeyPressed
        // TODO add your handling code here:
         if(evt.getKeyCode()== KeyEvent.VK_HOME && tblStaffLogging.getRowCount()>0){
            /*mitDelete = new JMenuItem("Delete");
            mitDelete.addActionListener(this);        
            mnuPurchaseActions.add(mitDelete);*/
             
            mitEdit = new JMenuItem("Edit");
            mitEdit.addActionListener(this); 
            mnuPurchaseActions.add(mitEdit);
             
        }
    }//GEN-LAST:event_tblStaffLoggingKeyPressed

    private void tblStaffLoggingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStaffLoggingMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_tblStaffLoggingMouseClicked

    private void btnAddMoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMoreActionPerformed
        // TODO add your handling code here:
        enableFormElements(true);
        SuggestionExampleMain.populateStaffNames(this, txtStaffName);
        //SupplierDAO supplierDAO = new SupplierDAO();
        //renderSupplierDataIntoDropDown(supplierDAO.retrieveAll());
        txtStaffName.requestFocus();
    }//GEN-LAST:event_btnAddMoreActionPerformed

    private void txtRatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtRatePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRatePropertyChange

    private void txtInvoiceNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvoiceNumberKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_ENTER){
            try{
               txtStaffName.requestFocus();
            }
            catch(Exception e){
            }
        }
    }//GEN-LAST:event_txtInvoiceNumberKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WorkLogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WorkLogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WorkLogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WorkLogForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WorkLogForm().setVisible(true);
            }
        });
    }
    
    public void initializeForm(){
        btnAddMore.setVisible(false);
        btnSave.setText("New");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        btnSave.requestFocus();
        txtPhone.setText("");
        txtStaffName.setText("");
        //txtSupplierRating.setText("");
        txtBillableHourse.setText("");

        radCash.setSelected(true);
        //cmbSupplierName.removeAllItems();
        //txtBillNumber.setText("10021");
        
        
        enableFormElements(false);
        
        mnuPurchaseActions = new JPopupMenu();
        /*mitDelete = new JMenuItem("Delete");
        mitDelete.addActionListener(this);
        
        mnuPurchaseActions.add(mitDelete);*/
         // sets the popup menu for the table
        tblStaffLogging.setComponentPopupMenu(mnuPurchaseActions);      
        tblStaffLogging.addMouseListener(new TableMouseListener(tblStaffLogging));
        
        TableColumn idColumn = tblStaffLogging.getColumnModel().getColumn(tblStaffLogging.getColumnCount()-1);
        idColumn.setPreferredWidth(0);
        idColumn.setMinWidth(0);
        idColumn.setMaxWidth(0);
        
        TableColumn itemColumn = tblStaffLogging.getColumnModel().getColumn(tblStaffLogging.getColumnCount()-2);
        itemColumn.setPreferredWidth(0);
        itemColumn.setMinWidth(0);
        itemColumn.setMaxWidth(0);
        
        
        TableColumn itemNameColumn = tblStaffLogging.getColumnModel().getColumn(1);
        itemNameColumn.setPreferredWidth(400);
        itemNameColumn.setMinWidth(400);
        itemNameColumn.setMaxWidth(400);
        
        TableColumn phoneNumberCol = tblStaffLogging.getColumnModel().getColumn(2);
        phoneNumberCol.setPreferredWidth(100);
        phoneNumberCol.setMinWidth(100);
        phoneNumberCol.setMaxWidth(100);
        
        WorkLogDAO navigationDAO =  new WorkLogDAO();
        List<Long> idMaxMin = navigationDAO.getMaxAndMinIds();
        minId = idMaxMin.get(0);
        maxId = idMaxMin.get(1);
        //currentId = maxId;
        
        tblStaffLogging.removeAll();
        tblStaffLogging.repaint();
        DefaultTableModel model = (DefaultTableModel) tblStaffLogging.getModel();
        model.setRowCount(0);
   
    }
    
    public void enableFormElements(boolean flag){
        txtInvoiceNumber.setEnabled(flag);
        txtPhone.setEnabled(flag);
        txtStaffName.setEnabled(flag);
        txtBillableHourse.setEnabled(flag);
        txtRate.setEnabled(flag);

        dtpWorkedDate.setEnabled(flag);
        
    }
    public boolean validateForm(){
        //btnSave.setText("Add");
        //btnSave.requestFocus();
        /*if(gStockAvailable < Double.parseDouble(txtQuantity.getText())){
            int choice = JOptionPane.showConfirmDialog(null, "This item is out of stock, are you sure to continue with Billing?");
            System.out.println("choice--"+choice);
            if(choice==0)
                return true;
            else 
                return false;
        }*/
        /*if(cmbSupplierName.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "Please choose a customer type");
            cmbSupplierName.requestFocus();
            return false;
        }*/
        
        if(null == txtStaffName.getText()){
            JOptionPane.showMessageDialog(null, "Please give the staff name.");
            txtStaffName.requestFocus();
            return false;
        }
        if(null == txtPhone.getText() || !(txtPhone.getText().matches("\\w+"))){
            JOptionPane.showMessageDialog(null, "Phone  "+txtPhone.getText() +" is not valid.");
            txtPhone.requestFocus();
            return false;
        }
        if(null == txtBillableHourse.getText() || !(txtBillableHourse.getText().matches("^\\d*\\.\\d+|\\d+|\\d+\\.\\d*$"))){
            JOptionPane.showMessageDialog(null, "Billable hours "+txtBillableHourse.getText() +" is not valid.");
            txtBillableHourse.requestFocus();
            return false;
        }      
     
        //txtProductCategoryName.setText("");
        return true;
    }
    
    public boolean validatePurchaseDetails(){
        //btnSave.setText("Add");
        //btnSave.requestFocus();
        
        
        if(null == txtInvoiceNumber.getText() || (txtInvoiceNumber.getText().equalsIgnoreCase(""))){
            JOptionPane.showMessageDialog(null, "Please enter purchase Reference number");
            return false;
        }
        
        /*else if(cmbSupplierName.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "Please choose the supplier name");
            return false;
        }*/
        /*if(null == txtQuantity.getText() || !(txtQuantity.getText().matches("\\d+"))){
            JOptionPane.showMessageDialog(null, "Quantity "+txtQuantity.getText() +" is not valid.");
            return false;
        }*/
        else if(tblStaffLogging.getRowCount()<1){
            JOptionPane.showMessageDialog(null, "Please enter the work log details");
            txtStaffName.requestFocus();
            return false;
        }
        
        else if(!(txtInvoiceNumber.getText().trim().equals(""))){
            
            WorkLogDAO purchaseDAO = new WorkLogDAO();
            WorkLog purchase = purchaseDAO.retrieveByRefNumber(txtInvoiceNumber.getText().trim());
            if(purchase!=null){
                JOptionPane.showMessageDialog(null, "The reference number already exists.");
                return false;
            }
        }        
        
     
        //txtProductCategoryName.setText("");
        return true;
    }
    
    public void populateItemDetails(){
        StaffDAO staffDAO = null;
        //Stock
        staff = null;
        double dUnitGst=0.0;
        //double dUnitSellingPrice=0.0;
      
        try{
        
        if(!txtStaffName.getText().equalsIgnoreCase(""))
        staffDAO = new StaffDAO();
        
        staff = staffDAO.retrieveByName(txtStaffName.getText().trim());
        txtPhone.setText(staff.getPhoneNumber());
        txtRate.setText(staff.getRatePerHour()+"");
        txtRate.setEnabled(true);
        txtBillableHourse.setText("1");
        txtBillableHourse.requestFocus();
          }catch(Exception e){
            System.out.println("----Error Block -"+e.getMessage());
        }
    }
    
        
    public void saveWorkLogForm(){

        WorkLogDAO billGenDAO =  new WorkLogDAO();
        WorkLog workLog = new WorkLog();
        workLog.setReferenceNumber(Long.parseLong(txtInvoiceNumber.getText()));
        workLog.setWorkDate(dtpWorkedDate.getDate());
        /*Customer customer = (Customer)cmbCustomerName.getSelectedItem();
        sales.setCustomerId(customer.getId());*/
        //Supplier supplier = (Supplier)cmbSupplierName.getSelectedItem();
        System.out.println("----"+workLog.getReferenceNumber());
        //purchase.setSupplierId(supplier.getSupplierId());
        //purchase.setBillAmount(Double.parseDouble(txtTotalAmount.getText()));

       
        if(radCash.isSelected())
            workLog.setStatus("Paid");
        else
            workLog.setStatus("Credit");
        workLog.setCreateTS(Calendar.getInstance().getTime());
        workLog.setUpdateTS(Calendar.getInstance().getTime());
        workLog.setTotalAmount(Double.parseDouble(txtTotalAmount.getText()));
        
        WorkLogDetails workLogDetails = null;
        List<WorkLogDetails> workLogDetailsList =  new ArrayList<>();
        for(int i=0;i<worklogDetailsModel.getRowCount();i++){
            workLogDetails = new WorkLogDetails();
            workLogDetails.setStaffType(worklogDetailsModel.getValueAt(i, 0).toString());
            workLogDetails.setStaffName(worklogDetailsModel.getValueAt(i, 1).toString());
            workLogDetails.setPhoneNumber(worklogDetailsModel.getValueAt(i, 2).toString());
            workLogDetails.setRatePerHour(Double.parseDouble(worklogDetailsModel.getValueAt(i, 3).toString()));
            workLogDetails.setHoursWorked(Double.parseDouble(worklogDetailsModel.getValueAt(i, 4).toString()));
            workLogDetails.setNetAmount(Double.parseDouble(worklogDetailsModel.getValueAt(i, 5).toString()));
            workLogDetails.setStaffId(Long.parseLong(worklogDetailsModel.getValueAt(i, 6).toString()));
            workLogDetailsList.add(workLogDetails);
        }         
        workLog.setWorkLogDetails(workLogDetailsList);
        WorkLogDAO purchaseDAO =  new WorkLogDAO();
        for(int i=0; i<map.size();i++){
            System.out.println("--key :: "+map.keySet());
            System.out.println("--value :: "+map.values());
        }
        purchaseDAO.insertIntoDB(workLog);
        
    }
    
        public void updateWorkLogForm(List<WorkLogReturn> returnList){

        //SalesDAO billGenDAO =  new SalesDAO();
        //!@-- 03/15/2020
        deriveValuesFromPurchaseInput();
        
        WorkLog workLog = new WorkLog();
        workLog.setWorkLogId(workLogIdEdit);
        //purchase.setSupplierId(((Supplier)cmbSupplierName.getSelectedItem()).getSupplierId());
        workLog.setReferenceNumber(Long.parseLong(txtInvoiceNumber.getText()));
        workLog.setWorkDate(dtpWorkedDate.getDate());
        /*Customer customer = (Customer)cmbCustomerName.getSelectedItem();
        sales.setCustomerId(customer.getCustomerId());*/
        System.out.println("Update----"+workLog.getReferenceNumber());
        workLog.setTotalAmount(Double.parseDouble(txtTotalAmount.getText()));
        /*purchase.setDiscount(Double.parseDouble(txtDiscountAmount.getText()));
        purchase.setPayableAmount(Double.parseDouble(txtAmountPayable.getText()));
        purchase.setTotalGst(Double.parseDouble(txtTotalGst.getText()));
        purchase.setSgst(Double.parseDouble(txtSGst.getText()));
        purchase.setCgst(Double.parseDouble(txtCGst.getText()));
        purchase.setGstAt12(Double.parseDouble(txtGst12.getText()));
        purchase.setGstAt18(Double.parseDouble(txtGst18.getText()));
        //purchase.setGstAt28(Double.parseDouble(txtGst28.getText()));
        purchase.setGstAt30(Double.parseDouble(txtGst5.getText()));
        purchase.setCess(Double.parseDouble(txtCess.getText()));*/

        
        //!@-- Amount in Words change 13/03/2020
        //String sPayableAmount = Math.round(sales.getBillAmount())+"";
        //String intPart = sPayableAmount.substring(0, sPayableAmount.indexOf("."));
        //System.out.println("--Int Part :: "+intPart);
        //sales.setAmountInWords("Rupees "+GenericUtils.numberToWord(Integer.parseInt(sPayableAmount))+" Only");
        //sales.setPayableAmount(Math.round(sales.getBillAmount()));
        //sales.setRoundOff(Math.round(sales.getBillAmount())-sales.getBillAmount());
        //System.out.println("--Amount in Words :: "+sales.getAmountInWords());
        //sales.setTaxableAt5(gTaxableAt5);
        //sales.setTaxableAt12(gTaxableAt12);
        //sales.setTaxableAt18(gTaxableAt18);
        //sales.setTaxableAt0(gTaxableAt0);
        //sales.setTaxableAt28(gTaxableAt28);
        //System.out.println("Cess---"+sales.getCess());
        
        
        if(radCash.isSelected())
            workLog.setStatus("Paid");
        else
            workLog.setStatus("Credit");
        
        //For handling more line items after on top of existing Bill
        WorkLogDetails workLogDetails = null;
        List<WorkLogDetails> moreItemsList =  new ArrayList<>();
        for(int i=0;i<worklogDetailsModel.getRowCount();i++){//Newly added items logic
            if(worklogDetailsModel.getValueAt(i, worklogDetailsModel.getColumnCount()-1)==null){
                System.out.println("--!@#"+worklogDetailsModel.getValueAt(i, 1).toString());
                workLogDetails = new WorkLogDetails();
                workLogDetails.setStaffType(worklogDetailsModel.getValueAt(i, 0).toString());
                workLogDetails.setStaffName(worklogDetailsModel.getValueAt(i, 1).toString());
                workLogDetails.setPhoneNumber(worklogDetailsModel.getValueAt(i, 2).toString());
                workLogDetails.setRatePerHour(Double.parseDouble(worklogDetailsModel.getValueAt(i, 3).toString()));
                workLogDetails.setHoursWorked(Double.parseDouble(worklogDetailsModel.getValueAt(i, 4).toString()));
                workLogDetails.setNetAmount(Double.parseDouble(worklogDetailsModel.getValueAt(i, 5).toString()));
                workLogDetails.setStaffId(Long.parseLong(worklogDetailsModel.getValueAt(i, 6).toString()));             
                moreItemsList.add(workLogDetails);
            }
        }       
        workLog.setWorkLogDetails(moreItemsList); 
        WorkLogDAO workLogDAO =  new WorkLogDAO();
        for(int i=0; i<map.size();i++){
            System.out.println("--key :: "+map.keySet());
            System.out.println("--value :: "+map.values());
        }
        System.out.println(" moreItemsList :"+moreItemsList.size());
        workLogDAO.updateWorkLog(workLog,returnList);
        
    }
    

    
    public void renderWorkLogDataIntoTable(Stock stock){
       
        
        worklogDetailsModel = (DefaultTableModel) tblStaffLogging.getModel();
        TableColumn idColumn = tblStaffLogging.getColumnModel().getColumn(tblStaffLogging.getColumnCount()-1);
        idColumn.setPreferredWidth(0);
        idColumn.setMaxWidth(0);
        
        TableColumn nameColumn = tblStaffLogging.getColumnModel().getColumn(1);
        nameColumn.setPreferredWidth(240);
        
        //double itemAmount = (Double.parseDouble(stock.getSellingPrice())*gSalesPercentage)/100;
        //double itemAmount = (stock.getSellingPrice()*gSalesPercentage)/100;
        //double dBasingPercentage = (1+stock.getGstPercentage()/100);
        //System.out.println("Pricing Percent --"+dBasingPercentage);
        double dPayableAmount = Double.parseDouble(txtBillableHourse.getText())*staff.getRatePerHour();
        //double dDerivedGst = dBasePrice * stock.getGstPercentage()/100;
        //map.put(stock.getItemId(), Double.parseDouble(txtQuantity.getText()));
        gStockAvailable = 0;
        if(worklogDetailsModel != null){
            worklogDetailsModel.addRow(new Object[]{staff.getStaffType(), staff.getStaffName(), staff.getPhoneNumber(), staff.getRatePerHour(),txtBillableHourse.getText(),dPayableAmount, staff.getStaffId()});
        //model.
                
        } 
        deriveValuesFromPurchaseInput();
    }
    
    public final void fetchWorkLogDataIntoTable(WorkLog workLog){
        System.out.println("--Called fetchWorkLogDataIntoTable"+workLog.getWorkLogDetails().size());
        //initializeForm();
        //enableFormElements(true);
        tblStaffLogging.removeAll();
        tblStaffLogging.repaint();
        DefaultTableModel model = (DefaultTableModel) tblStaffLogging.getModel();
        model.setRowCount(0);
        
        //09/03/2020
        workLogIdEdit = workLog.getWorkLogId();
        currentId = workLog.getWorkLogId();
        btnSave.setText("Update");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
        btnAddMore.setVisible(true);
        dtpWorkedDate.setEnabled(true);
        txtInvoiceNumber.setEnabled(true);
        mnuPurchaseActions.removeAll();
        
        //CORRECTION NEEDED FOR RETURN LOGIC - Return option is enabled at fetch details itself
        mitReturn = new JMenuItem("Return");
        mitReturn.addActionListener(this); 
        mnuPurchaseActions.add(mitReturn);
        
        /*mitEdit = new JMenuItem("Edit");
        mitEdit.addActionListener(this); 
        mnuPurchaseActions.add(mitEdit);*/
 
        /*for(int i=0; i<cmbSupplierName.getItemCount();i++){
            if(((Supplier)cmbSupplierName.getItemAt(i)).getSupplierId() == purchase.getSupplierId()){
                cmbSupplierName.setSelectedItem(cmbSupplierName.getItemAt(i));
            }
        }*/ 
        returnList =new ArrayList<WorkLogReturn>();       
     
        //mnuPurchaseActions.remove(mitDelete);
        System.out.println("!@#-------//"+workLog.getTotalAmount());
        dtpWorkedDate.setDate(workLog.getWorkDate());
        
        txtInvoiceNumber.setText(workLog.getReferenceNumber()+"");
        //dtpPurchaseDate.setDate(purchase.getPurchaseDate());
        txtTotalAmount.setText(workLog.getTotalAmount()+"");
        /*txtDiscountAmount.setText(purchase.getDiscount()+"");
        txtAmountPayable.setText(purchase.getPayableAmount()+"");
        txtTotalGst.setText(purchase.getTotalGst()+"");
        txtSGst.setText(purchase.getSgst()+"");
        txtCGst.setText(purchase.getCgst()+"");
        txtGst12.setText(purchase.getGstAt12()+"");
        txtGst18.setText(purchase.getGstAt18()+"");
        txtGst5.setText(purchase.getGstAt30()+"");
        //txtCess.setText(purchase.getCess()+"");
        txtCess.setText("0.0");*/
        if("Paid".equalsIgnoreCase(workLog.getStatus()))
            radCash.setSelected(true);
        else
            radCredit.setSelected(true);
        workLog.setWorkLogId(workLogIdEdit);
        /*purchase.setSgst(Double.parseDouble(txtSGst.getText()));
        purchase.setCgst(Double.parseDouble(txtCGst.getText()));
        purchase.setGstAt12(Double.parseDouble(txtGst12.getText()));
        purchase.setGstAt18(Double.parseDouble(txtGst18.getText()));
        purchase.setGstAt30(Double.parseDouble(txtGst5.getText()));
        purchase.setCess(Double.parseDouble(txtCess.getText()));*/
        List<WorkLogDetails> workLogDetailsList = workLog.getWorkLogDetails();
        worklogDetailsModel = (DefaultTableModel) tblStaffLogging.getModel();
        for(int i=0;i<workLogDetailsList.size();i++){
            worklogDetailsModel.addRow(new Object[]{workLogDetailsList.get(i).getStaffType()
                    , workLogDetailsList.get(i).getStaffName()
                    , workLogDetailsList.get(i).getPhoneNumber()
                    , workLogDetailsList.get(i).getRatePerHour()
                    , workLogDetailsList.get(i).getHoursWorked()
                    , workLogDetailsList.get(i).getNetAmount()
                    , workLogDetailsList.get(i).getWorkLogDetailsId()
                    ,workLogDetailsList.get(i).getWorkLogId()});
        }
        /*if(salesDetailsModel != null){
        salesDetailsModel.addRow(new Object[]{stock.getHsnCode(),stock.getItemName(),stock.getGstPercentage(),df.format(Double.parseDouble(stock.getGstAmount()) * Double.parseDouble(txtQuantity.getText())), itemAmount, Double.parseDouble(txtQuantity.getText()), df.format(itemAmount * Double.parseDouble(txtQuantity.getText())), stock.getItemId()});
        //model.
                
        } */
        //deriveValuesFromSalesInput();
    }
    
    public void deriveValuesFromPurchaseInput(){
        gBillAmount = 0;
         gDiscount = 0;
         gPyableAmount = 0;
         gBalanceAmount = 0;
         gTotalGst = 0;
         gSGst = 0;
         gCGst = 0;
         gQuantity = 0;
         gGst12 = 0;
         gGst18 = 0;
         gGst5 = 0;
         gCess = 0;
        for(int i=0; i<tblStaffLogging.getRowCount();i++){
            gQuantity += Double.parseDouble(tblStaffLogging.getValueAt(i,4).toString());
            gBillAmount += Double.parseDouble(tblStaffLogging.getValueAt(i,5).toString());
            if(tblStaffLogging.getValueAt(i,3).toString().equals("12.0") || tblStaffLogging.getValueAt(i,3).toString().equals("12")){
                gGst12 += Double.parseDouble(tblStaffLogging.getValueAt(i,4).toString());
            }else if(tblStaffLogging.getValueAt(i,3).toString().equals("18.0") || tblStaffLogging.getValueAt(i,3).toString().equals("18")){
                gGst18 += Double.parseDouble(tblStaffLogging.getValueAt(i,4).toString());
            }else if(tblStaffLogging.getValueAt(i,3).toString().equals("5.0")|| tblStaffLogging.getValueAt(i,3).toString().equals("5")){
                gGst5 += Double.parseDouble(tblStaffLogging.getValueAt(i,4).toString());
            }
            gTotalGst += Double.parseDouble(tblStaffLogging.getValueAt(i,4).toString());
            
        }
        
        /*txtGst12.setText(df.format(gGst12));
        txtGst18.setText(df.format(gGst18));
        txtGst5.setText(df.format(gGst5));*/
        gSGst = gTotalGst*0.5;
        gCGst = gTotalGst*0.5;
        /*txtSGst.setText(df.format(gSGst));
        txtCGst.setText(df.format(gCGst));
        txtTotalGst.setText(df.format(gTotalGst));*/
        //gCess = gTotalGst*0.01;
        //txtCess.setText(df.format(gCess));
        //txtCess.setText("0.0");
        txtTotalAmount.setText(df.format(gBillAmount));
        /*if(((PricingTier)cmbSupplierName.getSelectedItem()).getCustomerTypeName().equals("Contractor")){
            gDiscount = gBillAmount*0.03;
        }else{
            gDiscount = 0.0;
        }*/
        //gDiscount = gBillAmount*0.05;
        gPyableAmount = gBillAmount + gCess - gDiscount;
        //txtDiscountAmount.setText(df.format(gDiscount));
        //txtAmountPayable.setText(df.format(Math.round(gPyableAmount)));
    }
    
    public void clearItemFields(){
        txtStaffName.setText(null);
        txtPhone.setText(null);
        txtRate.setText(null);
        txtBillableHourse.setText(null);
        //txtPurchasePrice.setText(null);
        //txtGstAmount.setText(null);
        //txtGstPercentage.setText(null);
        lblAvailableQty.setText(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMore;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewAll;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton cmdReset;
    private com.toedter.calendar.JDateChooser dtpWorkedDate;
    private javax.swing.ButtonGroup grpSalesType;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblAvailableQty;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblHSNCode;
    private javax.swing.JLabel lblInvoiceNumber;
    private javax.swing.JLabel lblItemName;
    private javax.swing.JLabel lblPaymentType;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSGst1;
    private javax.swing.JLabel lblUnitPrice;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JMenuItem mitReturn;
    private javax.swing.JPopupMenu mnuPurchaseActions;
    private javax.swing.JPanel pnlPurchase;
    private javax.swing.JRadioButton radCash;
    private javax.swing.JRadioButton radCredit;
    private javax.swing.JScrollPane spnPurchaseItems;
    private com.essar.dao.StockDAO stockDAO1;
    private javax.swing.JTable tblStaffLogging;
    private javax.swing.JTextField txtBillableHourse;
    private javax.swing.JTextField txtInvoiceNumber;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRate;
    private javax.swing.JTextField txtStaffName;
    private javax.swing.JTextField txtTotalAmount;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
            if (menu == mitDelete) {
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE DELETE-"+tblStaffLogging.getModel().getValueAt(tblStaffLogging.getSelectedRow(),0));
                //Removes just the selected row from UI,  NOT from DB
                map.remove(tblStaffLogging.getModel().getValueAt(tblStaffLogging.getSelectedRow(),7));
                System.out.println("map keys : "+map.keySet());
                GenericUtils.removeRowFromJTable(tblStaffLogging, worklogDetailsModel);
                
                deriveValuesFromPurchaseInput();
            }else if (menu == mitReturn) {
                WorkLogReturn workLogReturn = new WorkLogReturn();
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE WORK LOG RETURN "+txtInvoiceNumber.getText());
                //Removes just the selected row from UI,  NOT from DB
                //System.out.println("Map Size ::" + map.size());
                workLogReturn.setReferenceNumber(Long.parseLong(txtInvoiceNumber.getText().trim()));
                workLogReturn.setWorkLogDetailsId(Long.parseLong(tblStaffLogging.getModel()
                        .getValueAt(tblStaffLogging.getSelectedRow(),tblStaffLogging.getColumnCount()-2).toString()));
                workLogReturn.setWorkLogId(Long.parseLong(tblStaffLogging.getModel()
                        .getValueAt(tblStaffLogging.getSelectedRow(),tblStaffLogging.getColumnCount()-1).toString()));
                
                System.out.println("--Purchase Id --"+workLogReturn.getWorkLogId());
                System.out.println("--Purchase DetailsId --"+workLogReturn.getWorkLogDetailsId());
                returnList.add(workLogReturn);
                  
                /*if(map.size()>0){
                    map.remove(tblSalesDetails.getModel().getValueAt(tblSalesDetails.getSelectedRow(),7));
                }
                System.out.println("map keys : "+map.keySet());*/
                GenericUtils.removeRowFromJTable(tblStaffLogging, worklogDetailsModel);
                deriveValuesFromPurchaseInput();
                
            }
            else if (menu == mitEdit){
                double exQuantity = 0;
                double refQuantity = 0;
                WorkLogReturn workLogReturn = new WorkLogReturn();
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE EDIT "+txtInvoiceNumber.getText());
                //Removes just the selected row from UI,  NOT from DB
                //System.out.println("Map Size ::" + map.size());
                enableFormElements(true);
                exQuantity = Double.parseDouble(tblStaffLogging.getModel().getValueAt(tblStaffLogging.getSelectedRow(),5).toString());
                //refQuantity = exQuantity - Double.parseDouble(txtQuantity.getText());
                enableFormElements(true);
                SuggestionExampleMain.populateStaffNames(this, txtStaffName);
                txtStaffName.setText(tblStaffLogging.getModel().getValueAt(tblStaffLogging.getSelectedRow(),1).toString());
                txtStaffName.requestFocus();
                //########
                //int rowIndex = tblSupplier.getSelectedRow();
                System.out.println("--------INSIDE WORK LOG RETURN "+txtInvoiceNumber.getText());
                //Removes just the selected row from UI,  NOT from DB
                //System.out.println("Map Size ::" + map.size());
                workLogReturn.setReferenceNumber(Long.parseLong(txtInvoiceNumber.getText().trim()));
                workLogReturn.setWorkLogDetailsId(Long.parseLong(tblStaffLogging.getModel()
                        .getValueAt(tblStaffLogging.getSelectedRow(),tblStaffLogging.getColumnCount()-2).toString()));
                workLogReturn.setWorkLogId(Long.parseLong(tblStaffLogging.getModel()
                        .getValueAt(tblStaffLogging.getSelectedRow(),tblStaffLogging.getColumnCount()-1).toString()));
                
                System.out.println("--Purchase Id --"+workLogReturn.getWorkLogId());
                System.out.println("--Purchase DetailsId --"+workLogReturn.getWorkLogDetailsId());
                returnList.add(workLogReturn);
                  

                GenericUtils.removeRowFromJTable(tblStaffLogging, worklogDetailsModel);
                deriveValuesFromPurchaseInput();
                
            } 
        }catch(Exception e){
            System.out.println("---"+e.getMessage());
            //JOptionPane.showMessageDialog(null, e.getMessage());
        }
       
    }
}
