/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.CustomerAccountDAO;
import com.essar.dao.CustomerAccountItemDAO;
import com.essar.dao.StaffDAO;
//import com.essar.dao.CustomerAccountDAO;
//import com.essar.dao.CustomerAccountItemDAO;
import com.essar.pojos.Staff;
import com.essar.pojos.CustomerAccount;
import com.essar.pojos.CustomerAccountItem;
import com.essar.pojos.PricingTier;
import com.essar.suggestion.SuggestionExampleMain;
import com.essar.utils.ConnectionManager;
import com.essar.utils.TableMouseListener;
import com.essar.utils.GenericUtils;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author rahumathulla
 */
public class CustomerAccountsForm extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form ProductCategory
     */
    long customerAccountid=0;
    DefaultTableModel customerAccountModel = null;
    DecimalFormat df = new DecimalFormat("##,##,###.##");
    boolean customerSelected = false;
    Staff customer =null;
    String pattern = "yyyy-MM-dd";
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
    public CustomerAccountsForm() {
        initComponents();
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
    }
    public void initilizeFilterControls(){
        StaffDAO customerDAO = new StaffDAO();
        renderCustomerDataIntoDropDown(customerDAO.retrieveAll(), cmbCustomerNameFilter);
        
        if(null==dtpFromDate.getDate()){
            //dtpFromDate.setDate(new Date());
            Calendar cal = Calendar.getInstance();
            System.out.println("Today : " + cal.getTime());
            cal.add(Calendar.DATE, -365);
           
            System.out.println("30 days ago: " + cal.getTime());
            dtpFromDate.setDate(cal.getTime());
            // Substract 30 days from the calendar
            //dtpFromDate.setDate(new Date(cal.add(Calendar.DATE, -30)));
        }        if(null==dtpToDate.getDate()){
            dtpToDate.setDate(new Date());
        }
    }
    public void applyFilterFunction(String query){
        //enableFormElements(false);
        
        CustomerAccountDAO customerAccountDAO = new CustomerAccountDAO();
        renderDataIntoTable(customerAccountDAO.retrieveByQuery(query));
        mnuCustomer = new JPopupMenu();
        
        mitEdit = new JMenuItem("Edit");
        mitEdit.addActionListener(this);
        
        mitDelete = new JMenuItem("Delete");
        mitDelete.addActionListener(this);
        
        mnuCustomer.add(mitEdit);
        mnuCustomer.add(mitDelete);
         // sets the popup menu for the table
        tblCustomerAccounts.setComponentPopupMenu(mnuCustomer);      
        tblCustomerAccounts.addMouseListener(new TableMouseListener(tblCustomerAccounts));
        
        TableColumn idColumn1 = tblCustomerAccounts.getColumnModel().getColumn(tblCustomerAccounts.getColumnCount()-1);
        idColumn1.setPreferredWidth(0);
        idColumn1.setMinWidth(0);
        idColumn1.setMaxWidth(0);
        
        TableColumn remarksColumn = tblCustomerAccounts.getColumnModel().getColumn(tblCustomerAccounts.getColumnCount()-2);
        remarksColumn.setPreferredWidth(500);
        remarksColumn.setMinWidth(500);
        //remarksColumn.setMaxWidth(500);
        
        TableColumn itemNameColumn = tblCustomerAccounts.getColumnModel().getColumn(1);
        itemNameColumn.setPreferredWidth(400);
        itemNameColumn.setMinWidth(400);

        
        customerAccountid = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        mnuCustomer = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        pnlCustomerAccounts = new javax.swing.JPanel();
        panCustomerAccounts = new javax.swing.JScrollPane();
        tblCustomerAccounts = new javax.swing.JTable();
        lblTotalCredit = new javax.swing.JLabel();
        lblTotalDebit = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblBalance = new javax.swing.JLabel();
        lblParticularName = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtRemarks = new javax.swing.JTextArea();
        txtAmount = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        lblCount = new javax.swing.JLabel();
        cmbParticularName = new javax.swing.JComboBox();
        btnSave = new javax.swing.JButton();
        dtpEventDate = new com.toedter.calendar.JDateChooser();
        lblAmount = new javax.swing.JLabel();
        lblCustomerName = new javax.swing.JLabel();
        cmbCustomerName = new javax.swing.JComboBox();
        lblDate = new javax.swing.JLabel();
        pnlAccountFilter = new javax.swing.JPanel();
        lblCustomerNameFilter = new javax.swing.JLabel();
        lblDateRange = new javax.swing.JLabel();
        dtpFromDate = new com.toedter.calendar.JDateChooser();
        dtpToDate = new com.toedter.calendar.JDateChooser();
        cmbCustomerNameFilter = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        btnApplyFilter = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        txtCustomerName = new javax.swing.JTextField();
        lblVoucherType = new javax.swing.JLabel();
        cmbVoucherType = new javax.swing.JComboBox();
        lblVoucherNumber = new javax.swing.JLabel();
        txtVoucherNumber = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        mitDelete.setText("jMenuItem1");

        mitEdit.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ledger Accounts");
        setExtendedState(6);
        setName("frmProductCategory"); // NOI18N

        tblCustomerAccounts.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        tblCustomerAccounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Particular Name", "Credit", "Debit", "##", "Description", "customerId", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        panCustomerAccounts.setViewportView(tblCustomerAccounts);

        lblTotalCredit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalCredit.setForeground(new java.awt.Color(0, 102, 0));
        lblTotalCredit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalCredit.setText("Cr Total");

        lblTotalDebit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalDebit.setForeground(new java.awt.Color(204, 0, 0));
        lblTotalDebit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalDebit.setText("Dr Total");

        lblBalance.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblBalance.setForeground(new java.awt.Color(0, 102, 204));
        lblBalance.setText("Balance: ");

        javax.swing.GroupLayout pnlCustomerAccountsLayout = new javax.swing.GroupLayout(pnlCustomerAccounts);
        pnlCustomerAccounts.setLayout(pnlCustomerAccountsLayout);
        pnlCustomerAccountsLayout.setHorizontalGroup(
            pnlCustomerAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerAccountsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCustomerAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCustomerAccountsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblTotalCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalDebit, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(855, 855, 855))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCustomerAccountsLayout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
            .addGroup(pnlCustomerAccountsLayout.createSequentialGroup()
                .addGroup(pnlCustomerAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomerAccountsLayout.createSequentialGroup()
                        .addGap(709, 709, 709)
                        .addComponent(lblBalance))
                    .addComponent(panCustomerAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 1325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 229, Short.MAX_VALUE))
        );
        pnlCustomerAccountsLayout.setVerticalGroup(
            pnlCustomerAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerAccountsLayout.createSequentialGroup()
                .addComponent(panCustomerAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addGroup(pnlCustomerAccountsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalDebit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblBalance)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        lblParticularName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblParticularName.setText("Particular Name");

        lblAddress.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        lblAddress.setText("Description");

        txtRemarks.setColumns(16);
        txtRemarks.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        txtRemarks.setRows(3);
        txtRemarks.setTabSize(2);
        txtRemarks.setToolTipText("");
        txtRemarks.setAutoscrolls(false);
        jScrollPane3.setViewportView(txtRemarks);

        txtAmount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblCount.setForeground(new java.awt.Color(102, 102, 255));
        lblCount.setText("Count:");

        cmbParticularName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbParticularNameActionPerformed(evt);
            }
        });
        cmbParticularName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbParticularNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbParticularNameKeyReleased(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        dtpEventDate.setDateFormatString("dd/MM/yyyy");

        lblAmount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblAmount.setText("Amount");

        lblCustomerName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCustomerName.setText("Customer Name");

        cmbCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCustomerNameActionPerformed(evt);
            }
        });

        lblDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDate.setText("Date");

        pnlAccountFilter.setBorder(javax.swing.BorderFactory.createTitledBorder("Account Filter"));

        lblCustomerNameFilter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCustomerNameFilter.setText("Customer Name");

        lblDateRange.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDateRange.setText("Date Range (From)");

        dtpFromDate.setDateFormatString("dd/MM/yyyy");

        dtpToDate.setDateFormatString("dd/MM/yyyy");

        cmbCustomerNameFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCustomerNameFilterActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("To");

        btnApplyFilter.setText("Apply");
        btnApplyFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyFilterActionPerformed(evt);
            }
        });

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print.png"))); // NOI18N
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAccountFilterLayout = new javax.swing.GroupLayout(pnlAccountFilter);
        pnlAccountFilter.setLayout(pnlAccountFilterLayout);
        pnlAccountFilterLayout.setHorizontalGroup(
            pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAccountFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCustomerNameFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDateRange, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbCustomerNameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAccountFilterLayout.createSequentialGroup()
                        .addGroup(pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAccountFilterLayout.createSequentialGroup()
                                .addComponent(dtpFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnApplyFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtpToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        pnlAccountFilterLayout.setVerticalGroup(
            pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccountFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAccountFilterLayout.createSequentialGroup()
                        .addGroup(pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbCustomerNameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustomerNameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAccountFilterLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(lblDateRange, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlAccountFilterLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dtpFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlAccountFilterLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dtpToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(pnlAccountFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAccountFilterLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnApplyFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlAccountFilterLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)))
                .addContainerGap())
        );

        txtCustomerName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerNameActionPerformed(evt);
            }
        });
        txtCustomerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustomerNameKeyReleased(evt);
            }
        });

        lblVoucherType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblVoucherType.setText("Voucher Type");

        cmbVoucherType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Journal", "Ledger", "Other" }));
        cmbVoucherType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbVoucherTypeActionPerformed(evt);
            }
        });

        lblVoucherNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblVoucherNumber.setText("Voucher Number");

        txtVoucherNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlCustomerAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCount, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblParticularName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbParticularName, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dtpEventDate, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnSave)
                                .addGap(6, 6, 6)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lblVoucherNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtVoucherNumber))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lblVoucherType, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(cmbVoucherType, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlAccountFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(326, 326, 326))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(pnlAccountFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblParticularName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbParticularName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dtpEventDate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addComponent(lblCount))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblVoucherType, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbVoucherType, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblVoucherNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtVoucherNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addComponent(lblAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSave)
                                    .addComponent(btnCancel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(pnlCustomerAccounts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        if(btnSave.getText().equalsIgnoreCase("add")){
            
            CustomerAccountItemDAO customerAccountItemDAO = new CustomerAccountItemDAO();
            renderParticularsDataIntoDropDown(customerAccountItemDAO.retrieveAll());
            
            StaffDAO customerDAO = new StaffDAO();
            renderCustomerDataIntoDropDown(customerDAO.retrieveAll(), cmbCustomerName);
            //!-- 02/11/2022 
            SuggestionExampleMain.populateStaffNames(this, txtCustomerName);
            
            btnSave.setText("Save");
            btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
            enableFormElements(true);
            dtpEventDate.setDate(new Date());
            txtCustomerName.requestFocus();
        }else{
            if(validateForm()){
                if(customerAccountid>0)
                    updateCustomerAccountForm();
                else
                    saveCustomerAccountForm();
                initializeForm();

            }   

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cmbCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCustomerNameActionPerformed
        // TODO add your handling code here:
        //if(null!= cmbCustomerName.getSelectedItem())
            //txtRemarks.setText(cmbCustomerName.getSelectedItem().toString());
        String selectClause = " SELECT * FROM customer_accounts ca WHERE 1=1 ";
        //String fromDate = simpleDateFormat.format(dtpFromDate.getDate());
        //String toDate = simpleDateFormat.format(dtpToDate.getDate());
        if(cmbCustomerName.getSelectedIndex() >=0 ){
            selectClause = selectClause + " AND ca.customer_id = "+((Staff)cmbCustomerName.getSelectedItem()).getStaffId(); 
        }
        /*selectClause = selectClause + " AND ca.event_date BETWEEN "
                    + "'"+fromDate +" 00:00:00' AND '"+toDate+ " 23:59:59'" ;*/
        
        applyFilterFunction(selectClause);
    }//GEN-LAST:event_cmbCustomerNameActionPerformed

    private void cmbCustomerNameFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCustomerNameFilterActionPerformed
        // TODO add your handling code here:

        /*customer = (Customer) cmbCustomerName.getSelectedItem();
        if(customer.getCustomerName().equalsIgnoreCase("customer") || customer.getCustomerName().equalsIgnoreCase("new")
            || customer.getCustomerName().equalsIgnoreCase("name")|| customer.getCustomerName().equalsIgnoreCase("default")){
            customerSelected = false;
        }else
        customerSelected = true;*/
       /* try{
        
        String selectClause = " SELECT * FROM customer_accounts ca WHERE 1=1 ";
        String fromDate = simpleDateFormat.format(dtpFromDate.getDate());
        String toDate = simpleDateFormat.format(dtpToDate.getDate());
        if(cmbCustomerNameFilter.getSelectedIndex() >=0 ){
            selectClause = selectClause + " AND ca.customer_id = "+((Customer)cmbCustomerNameFilter.getSelectedItem()).getCustomerId(); 
        }
        selectClause = selectClause + " AND ca.event_date BETWEEN "
                    + "'"+fromDate +" 00:00:00' AND '"+toDate+ " 23:59:59'" ;
        
        applyFilterFunction(selectClause);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Please select the customer");
        }*/
        
    }//GEN-LAST:event_cmbCustomerNameFilterActionPerformed

    private void btnApplyFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyFilterActionPerformed
        // TODO add your handling code here:
        String selectClause = " SELECT * FROM customer_accounts ca WHERE 1=1 ";
        String fromDate = simpleDateFormat.format(dtpFromDate.getDate());
        String toDate = simpleDateFormat.format(dtpToDate.getDate());
        if(cmbCustomerNameFilter.getSelectedIndex() >=0 ){
            selectClause = selectClause + " AND ca.customer_id = "+((Staff)cmbCustomerNameFilter.getSelectedItem()).getStaffId(); 
        }
        selectClause = selectClause + " AND ca.event_date BETWEEN "
                    + "'"+fromDate +" 00:00:00' AND '"+toDate+ " 23:59:59'" ;
        
        applyFilterFunction(selectClause);
    }//GEN-LAST:event_btnApplyFilterActionPerformed

    private void txtCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerNameActionPerformed
        // TODO add your handling code here:
        //customerEntryAction();
        //cmbParticularName.requestFocus();
    }//GEN-LAST:event_txtCustomerNameActionPerformed

    private void cmbParticularNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbParticularNameKeyReleased
        // TODO add your handling code here:
        //if(evt.getKeyCode() == KeyEvent.VK_TAB)
         //   txtAmount.requestFocus();
    }//GEN-LAST:event_cmbParticularNameKeyReleased

    private void cmbParticularNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbParticularNameActionPerformed
        // TODO add your handling code here:
       // txtAmount.requestFocus();
    }//GEN-LAST:event_cmbParticularNameActionPerformed

    private void txtCustomerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerNameKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()== KeyEvent.VK_ENTER && null != txtCustomerName.getText()
                && !("".equalsIgnoreCase(txtCustomerName.getText()))){
            customerEntryAction();
            cmbParticularName.requestFocus();
        }
    }//GEN-LAST:event_txtCustomerNameKeyReleased

    private void cmbParticularNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbParticularNameKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_TAB)
            txtAmount.requestFocus();
    }//GEN-LAST:event_cmbParticularNameKeyPressed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        
        String selectClause = " SELECT ca.customer_account_id"
                + ", ca.customer_id as cust_id"
                + ", ca.customer_account_item_id as cust_acct_item_id"
                + ", ca.event_date as event_date"
                + ", ca.particular_name as particular_name"
                + ", ca.type as type"
                + ", ca.credit_amount as credit_amount"
                + ", ca.debit_amount as debit_amount"
                + ", ct.customer_name as cust_name"
                + ", ca.voucher_type as voucher_type"
                + ", ca.voucher_number as voucher_number"                
                + " FROM customer_accounts ca JOIN customer ct ON ca.customer_id = ct.customer_id WHERE 1=1 ";
        String fromDate = simpleDateFormat.format(dtpFromDate.getDate());
        String toDate = simpleDateFormat.format(dtpToDate.getDate());
        if(cmbCustomerNameFilter.getSelectedIndex() >=0 ){
            selectClause = selectClause + " AND ca.customer_id = "+((Staff)cmbCustomerNameFilter.getSelectedItem()).getStaffId(); 
        }
        selectClause = selectClause + " AND ca.event_date BETWEEN "
                    + "'"+fromDate +" 00:00:00' AND '"+toDate+ " 23:59:59'" ;
        
        String reportString = "src\\com\\essar\\reports\\ledger_account.jrxml";
        
        ConnectionManager cm = new ConnectionManager();
        Connection con = cm.getConnection();
        System.out.println("Query ::"+selectClause);
        //String reportString="src\\com\\essar\\reports\\gst.jrxml";
        JasperReport jr = null;
        HashMap map = new HashMap();
        map.put("query_param",selectClause);
        try {
            jr = JasperCompileManager.compileReport(reportString);
        } catch (JRException ex) {
            Logger.getLogger(SalesWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        JasperPrint jp = null;
        try {
            jp = JasperFillManager.fillReport(jr, map,con);

            con.close();
        } catch (JRException ex) {
            Logger.getLogger(StudentRegister.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SalesWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        //JasperViewer.viewReport(jp);
        JasperViewer jv = new JasperViewer(jp, false);
        jv.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt){
                //JOptionPane.showMessageDialog(new javax.swing.JFrame(), "Closed","Why?", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Jasper Window has been closed");
            }
        });
        jv.setVisible(true);
    }//GEN-LAST:event_btnPrintActionPerformed

    private void cmbVoucherTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbVoucherTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbVoucherTypeActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerAccountsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerAccountsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerAccountsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerAccountsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerAccountsForm().setVisible(true);
            }
        });
    }
    
    public void initializeForm(){
        //pnlAccountFilter.setVisible(false);
        cmbCustomerName.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) tblCustomerAccounts.getModel();
        model.setRowCount(0);
        
        btnSave.setText("Add");
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png")));
        btnSave.requestFocus();
        txtAmount.setText("");
        txtCustomerName.setText("");
        //txtCustomerPhone.setText("");
        txtRemarks.setText("");
        cmbParticularName.removeAllItems();
        //tblProductCategory.re();
        //tblCategory.remove(panPricingTier);
        enableFormElements(false);
        
        mnuCustomer = new JPopupMenu();
        
        mitEdit = new JMenuItem("Edit");
        mitEdit.addActionListener(this);
        
        mitDelete = new JMenuItem("Delete");
        mitDelete.addActionListener(this);
        
        mnuCustomer.add(mitEdit);
        mnuCustomer.add(mitDelete);
         // sets the popup menu for the table
        tblCustomerAccounts.setComponentPopupMenu(mnuCustomer);      
        tblCustomerAccounts.addMouseListener(new TableMouseListener(tblCustomerAccounts));
        
        populateLedgerAccoutnsData();
        
        TableColumn idColumn1 = tblCustomerAccounts.getColumnModel().getColumn(tblCustomerAccounts.getColumnCount()-1);
        idColumn1.setPreferredWidth(0);
        idColumn1.setMinWidth(0);
        idColumn1.setMaxWidth(0);
        
        TableColumn custIdColumn = tblCustomerAccounts.getColumnModel().getColumn(tblCustomerAccounts.getColumnCount()-2);
        custIdColumn.setPreferredWidth(0);
        custIdColumn.setMinWidth(0);
        custIdColumn.setMaxWidth(0);
        
        TableColumn remarksColumn = tblCustomerAccounts.getColumnModel().getColumn(tblCustomerAccounts.getColumnCount()-3);
        remarksColumn.setPreferredWidth(550);
        remarksColumn.setMinWidth(550);
        //remarksColumn.setMaxWidth(500);
        
        TableColumn itemNameColumn = tblCustomerAccounts.getColumnModel().getColumn(1);
        itemNameColumn.setPreferredWidth(400);
        itemNameColumn.setMinWidth(400);
        //itemNameColumn.setMaxWidth(400);
        
        /*TableColumn drColumn = tblCustomerAccount.getColumnModel().getColumn(1);
        itemNameColumn.setPreferredWidth(240);
        itemNameColumn.setMinWidth(240);
        itemNameColumn.setMaxWidth(240);*/
        
        //TableColumn drColumn = tblCustomerAccount.getColumnModel().getColumn(2);

        //TableColumn crColumn = tblCustomerAccount.getColumnModel().getColumn(3);
        
        customerAccountid = 0;
        initilizeFilterControls();
    
        
        
    }
    
    public void populateLedgerAccoutnsData(){
        CustomerAccountDAO customerAccountDAO = new CustomerAccountDAO();
        String custSQL = "SELECT * FROM customer_accounts ca WHERE 1=1";
        if(null!= cmbCustomerName.getSelectedItem()){
            long custId = ((Staff)cmbCustomerName.getSelectedItem()).getStaffId();
            custSQL = custSQL + " AND ca.customer_id = "+custId;            
        }
        renderDataIntoTable(customerAccountDAO.retrieveByQuery(custSQL));
    }
    
    public void enableFormElements(boolean flag){
        txtAmount.setEnabled(flag);
        dtpEventDate.setEnabled(flag);
        cmbParticularName.setEnabled(flag);
        //cmbCustomerName.setEnabled(flag);
        txtRemarks.setEnabled(flag); 
        txtCustomerName.setEnabled(flag); 
        txtVoucherNumber.setEnabled(flag);
        cmbVoucherType.setEnabled(flag);
    }
    public boolean validateForm(){
        //btnSave.setText("Add");
        //btnSave.requestFocus();
        if(null == cmbParticularName.getSelectedItem()){
            JOptionPane.showMessageDialog(null, "Please select particular name.");
            cmbParticularName.requestFocus();
            return false;
        }
        if(null == cmbCustomerName.getSelectedItem()){
            JOptionPane.showMessageDialog(null, "Please select customer name.");
            cmbCustomerName.requestFocus();
            return false;
        }
        
        if(null == dtpEventDate.getDate()){
            JOptionPane.showMessageDialog(null, "Please select a date.");
            dtpEventDate.requestFocus();
            return false;
        }
        
        if(null == txtAmount.getText() || "".equalsIgnoreCase(txtAmount.getText().trim()) || !(txtAmount.getText().matches("-?(\\d*\\.)?\\d+"))){
            JOptionPane.showMessageDialog(null, "Amount value "+txtAmount.getText() +" is not valid.");
            txtAmount.requestFocus();
            return false;
        }
        
        
        
        
               
        //txtProductCategoryName.setText("");
        return true;
    }
    
    public void saveCustomerAccountForm(){
 
        CustomerAccount customerAccount = new CustomerAccount();
        customerAccount.setCustomerId(((Staff)cmbCustomerName.getSelectedItem()).getStaffId());
        customerAccount.setCustomerAccountItemId(((CustomerAccountItem)cmbParticularName.getSelectedItem()).getCustomerAccountItemId());
        customerAccount.setEventDate(dtpEventDate.getDate());
        customerAccount.setParticularName(cmbParticularName.getSelectedItem().toString());
        customerAccount.setVoucherType(cmbVoucherType.getSelectedItem().toString());
        customerAccount.setType(((CustomerAccountItem)cmbParticularName.getSelectedItem()).getType());
        if(((CustomerAccountItem)cmbParticularName.getSelectedItem()).getType().equalsIgnoreCase("credit")){
            customerAccount.setCreditAmount(Double.parseDouble(txtAmount.getText().trim()));
        }else{
            customerAccount.setDebitAmount(Double.parseDouble(txtAmount.getText().trim()));
        }
        customerAccount.setVoucherNumber(txtVoucherNumber.getText());
        customerAccount.setRemarks(txtRemarks.getText());
        CustomerAccountDAO customerAccountDAO = new CustomerAccountDAO();
        customerAccountDAO.insertIntoDB(customerAccount);
        
    }
    public void updateCustomerAccountForm(){
 
        CustomerAccount customerAccount = new CustomerAccount();
        customerAccount.setCustomerAccountId(customerAccountid);
        customerAccount.setCustomerId(((Staff)cmbCustomerName.getSelectedItem()).getStaffId());
        customerAccount.setCustomerAccountItemId(((CustomerAccountItem)cmbParticularName.getSelectedItem()).getCustomerAccountItemId());
        customerAccount.setEventDate(dtpEventDate.getDate());
        customerAccount.setParticularName(cmbParticularName.getSelectedItem().toString());
        customerAccount.setVoucherType(cmbVoucherType.getSelectedItem().toString());
        customerAccount.setType(((CustomerAccountItem)cmbParticularName.getSelectedItem()).getType());
        if(((CustomerAccountItem)cmbParticularName.getSelectedItem()).getType().equalsIgnoreCase("credit")){
            customerAccount.setCreditAmount(Double.parseDouble(txtAmount.getText().trim()));
            customerAccount.setDebitAmount(0);
        }else{
            customerAccount.setDebitAmount(Double.parseDouble(txtAmount.getText().trim()));
            customerAccount.setCreditAmount(0);
        }
        customerAccount.setVoucherNumber(txtVoucherNumber.getText());
        customerAccount.setRemarks(txtRemarks.getText());
        CustomerAccountDAO customerAccountDAO = new CustomerAccountDAO();
        customerAccountDAO.updateRecord(customerAccount);
        
        //CustomerAccountItemDAO customerAccountItemDAO = new CustomerAccountItemDAO();
        //customerAccountItemDAO.updateRecord(customerAccount);
        
    }
    
    public void renderParticularsDataIntoDropDown(List<CustomerAccountItem> customerAccountList){
        CustomerAccountItem customerAccount = null;
        cmbParticularName.removeAllItems();
        if(customerAccountList!= null){
            for(int i=0; i<customerAccountList.size();i++){
                cmbParticularName.addItem(customerAccountList.get(i));
            }
            cmbParticularName.setSelectedIndex(0);
            //customerAccount = (CustomerAccountItem)cmbParticularName.getSelectedItem();            
        }
    }
    public void renderCustomerDataIntoDropDown(List<Staff> customerList, JComboBox fieldName){
        Staff customer = null;
        fieldName.removeAllItems();
        if(customerList!= null){
            for(int i=0; i<customerList.size();i++){
                fieldName.addItem(customerList.get(i));
            }
            fieldName.setSelectedIndex(0);
            //customerAccount = (CustomerAccountItem)cmbParticularName.getSelectedItem();            
        }
    }
    public void renderDataIntoTable(List<CustomerAccount> customerAccountList){
        
        tblCustomerAccounts.removeAll();
        tblCustomerAccounts.repaint();
        DefaultTableModel model = (DefaultTableModel) tblCustomerAccounts.getModel();
        model.setRowCount(0);
        
        customerAccountModel = (DefaultTableModel) tblCustomerAccounts.getModel();
        TableColumn column = tblCustomerAccounts.getColumnModel().getColumn(tblCustomerAccounts.getColumnCount()-1);
        column.setMaxWidth(0);
        column.setWidth(0);
        column.setPreferredWidth(0);
        
        TableColumn customeriIdColumn = tblCustomerAccounts.getColumnModel().getColumn(tblCustomerAccounts.getColumnCount()-2);
        customeriIdColumn.setPreferredWidth(0);
        customeriIdColumn.setMaxWidth(0);
        customeriIdColumn.setWidth(0);
        
        lblCount.setText("Count : "+customerAccountList.size());
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        //pricingTierModel.getColumnName(3).
        //System.out.println("-----"+pricingTierList.size());
        double totalDebit = 0;
        double totalCredit = 0;
        double sumAmount = 0;
        String sumAmountText="";
        for(int i=0;i<customerAccountList.size();i++){
            sumAmount = sumAmount + (customerAccountList.get(i).getCreditAmount()-customerAccountList.get(i).getDebitAmount());
            sumAmountText=sumAmount>0?"+"+sumAmount:sumAmount+"";
         
            customerAccountModel.addRow(new Object[]{sdf.format(customerAccountList.get(i).getEventDate())
                    , customerAccountList.get(i).getParticularName(),customerAccountList.get(i).getCreditAmount()
                    , customerAccountList.get(i).getDebitAmount(), sumAmountText, customerAccountList.get(i).getRemarks()
                    , customerAccountList.get(i).getCustomerId(), customerAccountList.get(i).getCustomerAccountId()});
            totalCredit = totalCredit + customerAccountList.get(i).getCreditAmount();
            totalDebit = totalDebit + customerAccountList.get(i).getDebitAmount();
        //model.
        }        
        lblTotalCredit.setText(df.format(totalCredit));
        lblTotalDebit.setText(df.format(totalDebit));
        lblBalance.setText("Balance : "+df.format((totalCredit-totalDebit))+"");
    }
    
    public void customerEntryAction(){
        if(null!= txtCustomerName.getText()){
            for(int i=0;i<cmbCustomerName.getItemCount();i++){
                //System.out.println("inside cust--> type loop"+tempPrice);
                Staff customer = (Staff) cmbCustomerName.getItemAt(i);
                if(txtCustomerName.getText().equalsIgnoreCase(customer.getStaffName())){
                    cmbCustomerName.setSelectedIndex(i);
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplyFilter;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbCustomerName;
    private javax.swing.JComboBox cmbCustomerNameFilter;
    private javax.swing.JComboBox cmbParticularName;
    private javax.swing.JComboBox cmbVoucherType;
    private com.toedter.calendar.JDateChooser dtpEventDate;
    private com.toedter.calendar.JDateChooser dtpFromDate;
    private com.toedter.calendar.JDateChooser dtpToDate;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblCustomerNameFilter;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDateRange;
    private javax.swing.JLabel lblParticularName;
    private javax.swing.JLabel lblTotalCredit;
    private javax.swing.JLabel lblTotalDebit;
    private javax.swing.JLabel lblVoucherNumber;
    private javax.swing.JLabel lblVoucherType;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JPopupMenu mnuCustomer;
    private javax.swing.JScrollPane panCustomerAccounts;
    private javax.swing.JPanel pnlAccountFilter;
    private javax.swing.JPanel pnlCustomerAccounts;
    private javax.swing.JTable tblCustomerAccounts;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextArea txtRemarks;
    private javax.swing.JTextField txtVoucherNumber;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
            if (menu == mitDelete) {
              //txtParticularName= tblCustomerAccountItem.getSelectedRow();
                System.out.println("--------INSIDE DELETE-"+tblCustomerAccounts.getModel().getValueAt(tblCustomerAccounts.getSelectedRow(),0));
                String customerAccountId = tblCustomerAccounts.getModel().getValueAt(tblCustomerAccounts.getSelectedRow(),tblCustomerAccounts.getColumnCount()-1).toString();
                long id = Long.parseLong(customerAccountId);
                CustomerAccountDAO customerAccountDAO = new CustomerAccountDAO();
                customerAccountDAO.deleteRecordById(id);
                GenericUtils.removeRowFromJTable(tblCustomerAccounts, customerAccountModel);
            }
            if (menu == mitEdit) {
                //int rowIndex = tblSupplier.getSelectedRow();
                enableFormElements(true);
                CustomerAccount customerAccount = null;
                System.out.println("--------INSIDE Edit-"+tblCustomerAccounts.getModel().getValueAt(tblCustomerAccounts.getSelectedRow(),1));
                customerAccountid = Integer.parseInt(tblCustomerAccounts.getModel().getValueAt(tblCustomerAccounts.getSelectedRow(),tblCustomerAccounts.getColumnCount()-1).toString());
                CustomerAccountDAO customerAccountDAO = new CustomerAccountDAO();
                customerAccount = customerAccountDAO.retrieveById(customerAccountid);
                System.out.println("--"+customerAccount.getParticularName());
                //txtAmount.setText(customerAccount.getCustomerAccountItemName());
                
               //=========Retrieving all Particulars and setting the appropriated one as selected.
                CustomerAccountItemDAO customerAccountItemDAO =  new CustomerAccountItemDAO();
                List<CustomerAccountItem> customerAccountItemList = customerAccountItemDAO.retrieveAll();
                renderParticularsDataIntoDropDown(customerAccountItemList);
                for(int i=0;i<customerAccountItemList.size();i++){
                    if(customerAccount.getCustomerAccountItemId()==customerAccountItemList.get(i).getCustomerAccountItemId()){
                        cmbParticularName.setSelectedItem(customerAccountItemList.get(i));
                    }
                }
                StaffDAO customerDAO =  new StaffDAO();
                List<Staff> customerList = customerDAO.retrieveAll();
                renderCustomerDataIntoDropDown(customerList, cmbCustomerName);
                for(int i=0;i<customerList.size();i++){
                    if(customerAccount.getCustomerId()==customerList.get(i).getStaffId()){
                        cmbCustomerName.setSelectedItem(customerList.get(i));
                    }
                }
                //**************
                dtpEventDate.setDate(customerAccount.getEventDate());
                if(customerAccount.getCreditAmount()>0)
                    txtAmount.setText(customerAccount.getCreditAmount()+"");
                else
                    txtAmount.setText(customerAccount.getDebitAmount()+"");
                txtRemarks.setText(customerAccount.getRemarks());
                
                //btnSave.setText("Save");
                //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
                btnSave.setText("Update");
                btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }
}
